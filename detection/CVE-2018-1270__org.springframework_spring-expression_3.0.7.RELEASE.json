{
    "vulnerable": false,
    "gav": {
        "version": "3.0.7.RELEASE",
        "groupId": "org.springframework",
        "artifactId": "spring-expression"
    },
    "cve": "CVE-2018-1270",
    "details": [
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/CodeFlow.class",
            "affectedFile": "/org/springframework/expression/spel/CodeFlow.class",
            "qname": "org.springframework.expression.spel.CodeFlow",
            "contained": false,
            "diff": null,
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/CodeFlow.class",
            "affectedFile": "/org/springframework/expression/spel/CodeFlow.class",
            "qname": "org.springframework.expression.spel.CodeFlow",
            "contained": false,
            "diff": null,
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/CodeFlow.class",
            "affectedFile": "/org/springframework/expression/spel/CodeFlow.class",
            "qname": "org.springframework.expression.spel.CodeFlow.toBoxedDescriptor(String)",
            "contained": false,
            "diff": null,
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/CodeFlow.class",
            "affectedFile": "/org/springframework/expression/spel/CodeFlow.class",
            "qname": "org.springframework.expression.spel.CodeFlow.toBoxedDescriptor(String)",
            "contained": false,
            "diff": null,
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests",
            "contained": false,
            "diff": null,
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests",
            "contained": false,
            "diff": null,
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests$FooObjectHolder",
            "contained": false,
            "diff": null,
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests$FooObjectHolder",
            "contained": false,
            "diff": null,
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests$FooObjectHolder.getFoo()",
            "contained": false,
            "diff": null,
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests$FooObjectHolder.getFoo()",
            "contained": false,
            "diff": null,
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests.compilationOfBasicNullSafeMethodReference()",
            "contained": false,
            "diff": null,
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests.compilationOfBasicNullSafeMethodReference()",
            "contained": false,
            "diff": null,
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests.failsWhenSettingContextForExpression_SPR12326()",
            "contained": false,
            "diff": null,
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests.failsWhenSettingContextForExpression_SPR12326()",
            "contained": false,
            "diff": null,
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests.nullsafeFieldPropertyDereferencing_SPR16489()",
            "contained": false,
            "diff": null,
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests.nullsafeFieldPropertyDereferencing_SPR16489()",
            "contained": false,
            "diff": null,
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests.nullsafeMethodChaining_SPR16489()",
            "contained": false,
            "diff": null,
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "affectedFile": "/org/springframework/expression/spel/SpelCompilationCoverageTests.class",
            "qname": "org.springframework.expression.spel.SpelCompilationCoverageTests.nullsafeMethodChaining_SPR16489()",
            "contained": false,
            "diff": null,
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/ast/MethodReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/MethodReference.class",
            "qname": "org.springframework.expression.spel.ast.MethodReference",
            "contained": true,
            "diff": "{\"lhs\" : {\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.MethodReference$CachedMethodExecutor cachedExecutor>\",\"cachedExecutor\":null,\"getName\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.String getName()>\",\"getValueRef\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r3 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r8 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r4 = virtualinvoke $r8.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"r5 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>(r1)\", \"r6 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>(r2, r3, r4, r5)\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>()\", \"return r6\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"throwIfNotNullSafe\":\"<org.springframework.expression.spel.ast.MethodReference: void throwIfNotNullSafe(java.util.List)>\",\"getArguments\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>\",\"getArgumentTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getArgumentTypes(java.lang.Object[])>\",\"getCachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor getCachedExecutor(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.util.List)>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,java.lang.Object,org.springframework.expression.EvaluationContext)>\",\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(java.lang.Object,org.springframework.expression.AccessException)>\",\"updateExitTypeDescriptor\":\"<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>\",\"toStringAST.2\":null,\"toStringAST.3\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3)\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i1 = 0\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i1 >= $i0 goto virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")\", \"if i1 <= 0 goto $r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\"],\"toStringAST.10\":[\"$r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\", \"$r8 = interfaceinvoke $r7.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)\", \"i1 = i1 + 1\", \"goto [?= $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\"],\"toStringAST.16\":[\"$r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r6\"],\"isCompilable\":\"<org.springframework.expression.spel.ast.MethodReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.MethodReference,org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"access$100\":\"<org.springframework.expression.spel.ast.MethodReference: void access$100(org.springframework.expression.spel.ast.MethodReference)>\",\"throwSimpleExceptionIfPossible\":null,\"getTypes\":null,\"findAccessorForMethod\":null},\"rhs\" : {\"cachedExecutor\":null,\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\",\"getName\":null,\"getValueRef\":null,\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"r3 = newarray (java.lang.Object)[$i0]\", \"i4 = 0\", \"goto [?= $i1 = lengthof r3]\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r4)\", \"$r5 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>\", \"$r6 = $r5[i4]\", \"$r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"r3[i4] = $r8\", \"goto [?= virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()]\", \"$r27 := @caughtexception\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"throw $r27\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"i4 = i4 + 1\", \"$i1 = lengthof r3\", \"if i4 < $i1 goto $r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"$r9 = virtualinvoke r2.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r9 != null goto r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"$z0 = r0.<org.springframework.expression.spel.ast.MethodReference: boolean nullSafe>\", \"if $z0 == 0 goto r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$r26 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>\", \"return $r26\", \"r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r22 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage METHOD_CALL_ON_NULL_OBJECT_NOT_ALLOWED>\", \"$r21 = newarray (java.lang.Object)[1]\", \"$r23 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r24 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"$r25 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>($r23, $r24)\", \"$r21[0] = $r25\", \"specialinvoke r44.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r22, $r21)\", \"r46 = (java.lang.Throwable) r44\", \"throw r46\", \"r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"if r40 == null goto $r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r16 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r17 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r18 = virtualinvoke $r17.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r19 = interfaceinvoke r40.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r16, $r18, r3)\", \"return $r19\", \"$r28 := @caughtexception\", \"r47 = (org.springframework.expression.AccessException) $r28\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r47)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = null\", \"$r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r11 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"r42 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>($r10, $r11, r1)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = r42\", \"$r12 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r13 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r14 = virtualinvoke $r13.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r15 = interfaceinvoke r42.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r12, $r14, r3)\", \"return $r15\", \"$r29 := @caughtexception\", \"r48 = (org.springframework.expression.AccessException) $r29\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r48)\", \"r45 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r33 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_METHOD_INVOCATION>\", \"$r31 = newarray (java.lang.Object)[3]\", \"$r32 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r31[0] = $r32\", \"$r34 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r35 = virtualinvoke $r34.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r36 = virtualinvoke $r35.<java.lang.Object: java.lang.Class getClass()>()\", \"$r37 = virtualinvoke $r36.<java.lang.Class: java.lang.String getName()>()\", \"$r31[1] = $r37\", \"r49 = (org.springframework.expression.AccessException) $r29\", \"$r38 = virtualinvoke r49.<org.springframework.expression.AccessException: java.lang.String getMessage()>()\", \"$r31[2] = $r38\", \"specialinvoke r45.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r29, $r33, $r31)\", \"r50 = (java.lang.Throwable) r45\", \"throw r50\"],\"getValueInternal\":null,\"throwIfNotNullSafe\":null,\"getArguments\":null,\"getArgumentTypes\":null,\"getCachedExecutor\":null,\"findAccessorForMethod\":null,\"throwSimpleExceptionIfPossible\":null,\"updateExitTypeDescriptor\":null,\"toStringAST.2\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()\"],\"toStringAST.3\":[\"$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)\", \"virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i0 = 0\", \"goto [?= $i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\", \"if i0 <= 0 goto $r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\"],\"toStringAST.10\":[\"$r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\", \"$r7 = interfaceinvoke $r6.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)\", \"i0 = i0 + 1\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i0 < $i1 goto (branch)\"],\"toStringAST.16\":[\"$r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r11\"],\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>\",\"getTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/ast/MethodReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/MethodReference.class",
            "qname": "org.springframework.expression.spel.ast.MethodReference",
            "contained": true,
            "diff": "{\"lhs\" : {\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.MethodReference$CachedMethodExecutor cachedExecutor>\",\"cachedExecutor\":null,\"getName\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.String getName()>\",\"getValueRef\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r3 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r8 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r4 = virtualinvoke $r8.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"r5 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>(r1)\", \"r6 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>(r2, r3, r4, r5)\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>()\", \"return r6\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"throwIfNotNullSafe\":\"<org.springframework.expression.spel.ast.MethodReference: void throwIfNotNullSafe(java.util.List)>\",\"getArguments\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>\",\"getArgumentTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getArgumentTypes(java.lang.Object[])>\",\"getCachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor getCachedExecutor(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.util.List)>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,java.lang.Object,org.springframework.expression.EvaluationContext)>\",\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(java.lang.Object,org.springframework.expression.AccessException)>\",\"updateExitTypeDescriptor\":\"<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>\",\"toStringAST.2\":null,\"toStringAST.3\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3)\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i1 = 0\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i1 >= $i0 goto virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")\", \"if i1 <= 0 goto $r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\"],\"toStringAST.10\":[\"$r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\", \"$r8 = interfaceinvoke $r7.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)\", \"i1 = i1 + 1\", \"goto [?= $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\"],\"toStringAST.16\":[\"$r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r6\"],\"isCompilable\":\"<org.springframework.expression.spel.ast.MethodReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.MethodReference,org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"access$100\":\"<org.springframework.expression.spel.ast.MethodReference: void access$100(org.springframework.expression.spel.ast.MethodReference)>\",\"throwSimpleExceptionIfPossible\":null,\"getTypes\":null,\"findAccessorForMethod\":null},\"rhs\" : {\"cachedExecutor\":null,\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\",\"getName\":null,\"getValueRef\":null,\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"r3 = newarray (java.lang.Object)[$i0]\", \"i4 = 0\", \"goto [?= $i1 = lengthof r3]\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r4)\", \"$r5 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>\", \"$r6 = $r5[i4]\", \"$r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"r3[i4] = $r8\", \"goto [?= virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()]\", \"$r38 := @caughtexception\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"throw $r38\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"i4 = i4 + 1\", \"$i1 = lengthof r3\", \"if i4 < $i1 goto $r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"$r9 = virtualinvoke r2.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r9 != null goto r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"$z0 = r0.<org.springframework.expression.spel.ast.MethodReference: boolean nullSafe>\", \"if $z0 == 0 goto r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$r26 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>\", \"return $r26\", \"r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r22 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage METHOD_CALL_ON_NULL_OBJECT_NOT_ALLOWED>\", \"$r21 = newarray (java.lang.Object)[1]\", \"$r23 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r24 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"$r25 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>($r23, $r24)\", \"$r21[0] = $r25\", \"specialinvoke r44.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r22, $r21)\", \"r46 = (java.lang.Throwable) r44\", \"throw r46\", \"r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"if r40 == null goto $r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r16 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r17 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r18 = virtualinvoke $r17.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r19 = interfaceinvoke r40.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r16, $r18, r3)\", \"return $r19\", \"$r37 := @caughtexception\", \"r47 = (org.springframework.expression.AccessException) $r37\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r47)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = null\", \"$r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r11 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"r42 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>($r10, $r11, r1)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = r42\", \"$r12 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r13 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r14 = virtualinvoke $r13.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r15 = interfaceinvoke r42.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r12, $r14, r3)\", \"return $r15\", \"$r27 := @caughtexception\", \"r48 = (org.springframework.expression.AccessException) $r27\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r48)\", \"r45 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r31 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_METHOD_INVOCATION>\", \"$r29 = newarray (java.lang.Object)[3]\", \"$r30 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r29[0] = $r30\", \"$r32 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r33 = virtualinvoke $r32.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r34 = virtualinvoke $r33.<java.lang.Object: java.lang.Class getClass()>()\", \"$r35 = virtualinvoke $r34.<java.lang.Class: java.lang.String getName()>()\", \"$r29[1] = $r35\", \"r49 = (org.springframework.expression.AccessException) $r27\", \"$r36 = virtualinvoke r49.<org.springframework.expression.AccessException: java.lang.String getMessage()>()\", \"$r29[2] = $r36\", \"specialinvoke r45.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r27, $r31, $r29)\", \"r50 = (java.lang.Throwable) r45\", \"throw r50\"],\"getValueInternal\":null,\"throwIfNotNullSafe\":null,\"getArguments\":null,\"getArgumentTypes\":null,\"getCachedExecutor\":null,\"findAccessorForMethod\":null,\"throwSimpleExceptionIfPossible\":null,\"updateExitTypeDescriptor\":null,\"toStringAST.2\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()\"],\"toStringAST.3\":[\"$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)\", \"virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i0 = 0\", \"goto [?= $i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\", \"if i0 <= 0 goto $r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\"],\"toStringAST.10\":[\"$r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\", \"$r7 = interfaceinvoke $r6.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)\", \"i0 = i0 + 1\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i0 < $i1 goto (branch)\"],\"toStringAST.16\":[\"$r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r11\"],\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>\",\"getTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/ast/MethodReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/MethodReference.class",
            "qname": "org.springframework.expression.spel.ast.MethodReference.generateCode(MethodVisitor,CodeFlow)",
            "contained": true,
            "diff": "{\"lhs\" : {\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.MethodReference$CachedMethodExecutor cachedExecutor>\",\"cachedExecutor\":null,\"getName\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.String getName()>\",\"getValueRef\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r3 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r8 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r4 = virtualinvoke $r8.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"r5 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>(r1)\", \"r6 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>(r2, r3, r4, r5)\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>()\", \"return r6\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"throwIfNotNullSafe\":\"<org.springframework.expression.spel.ast.MethodReference: void throwIfNotNullSafe(java.util.List)>\",\"getArguments\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>\",\"getArgumentTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getArgumentTypes(java.lang.Object[])>\",\"getCachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor getCachedExecutor(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.util.List)>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,java.lang.Object,org.springframework.expression.EvaluationContext)>\",\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(java.lang.Object,org.springframework.expression.AccessException)>\",\"updateExitTypeDescriptor\":\"<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>\",\"toStringAST.2\":null,\"toStringAST.3\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3)\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i1 = 0\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i1 >= $i0 goto virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")\", \"if i1 <= 0 goto $r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\"],\"toStringAST.10\":[\"$r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\", \"$r8 = interfaceinvoke $r7.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)\", \"i1 = i1 + 1\", \"goto [?= $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\"],\"toStringAST.16\":[\"$r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r6\"],\"isCompilable\":\"<org.springframework.expression.spel.ast.MethodReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.MethodReference,org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"access$100\":\"<org.springframework.expression.spel.ast.MethodReference: void access$100(org.springframework.expression.spel.ast.MethodReference)>\",\"throwSimpleExceptionIfPossible\":null,\"getTypes\":null,\"findAccessorForMethod\":null},\"rhs\" : {\"cachedExecutor\":null,\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\",\"getName\":null,\"getValueRef\":null,\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"r3 = newarray (java.lang.Object)[$i0]\", \"i4 = 0\", \"goto [?= $i1 = lengthof r3]\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r4)\", \"$r5 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>\", \"$r6 = $r5[i4]\", \"$r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"r3[i4] = $r8\", \"goto [?= virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()]\", \"$r27 := @caughtexception\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"throw $r27\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"i4 = i4 + 1\", \"$i1 = lengthof r3\", \"if i4 < $i1 goto $r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"$r9 = virtualinvoke r2.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r9 != null goto r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"$z0 = r0.<org.springframework.expression.spel.ast.MethodReference: boolean nullSafe>\", \"if $z0 == 0 goto r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$r26 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>\", \"return $r26\", \"r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r22 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage METHOD_CALL_ON_NULL_OBJECT_NOT_ALLOWED>\", \"$r21 = newarray (java.lang.Object)[1]\", \"$r23 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r24 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"$r25 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>($r23, $r24)\", \"$r21[0] = $r25\", \"specialinvoke r44.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r22, $r21)\", \"r46 = (java.lang.Throwable) r44\", \"throw r46\", \"r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"if r40 == null goto $r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r16 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r17 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r18 = virtualinvoke $r17.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r19 = interfaceinvoke r40.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r16, $r18, r3)\", \"return $r19\", \"$r28 := @caughtexception\", \"r47 = (org.springframework.expression.AccessException) $r28\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r47)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = null\", \"$r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r11 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"r42 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>($r10, $r11, r1)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = r42\", \"$r12 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r13 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r14 = virtualinvoke $r13.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r15 = interfaceinvoke r42.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r12, $r14, r3)\", \"return $r15\", \"$r29 := @caughtexception\", \"r48 = (org.springframework.expression.AccessException) $r29\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r48)\", \"r45 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r33 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_METHOD_INVOCATION>\", \"$r31 = newarray (java.lang.Object)[3]\", \"$r32 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r31[0] = $r32\", \"$r34 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r35 = virtualinvoke $r34.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r36 = virtualinvoke $r35.<java.lang.Object: java.lang.Class getClass()>()\", \"$r37 = virtualinvoke $r36.<java.lang.Class: java.lang.String getName()>()\", \"$r31[1] = $r37\", \"r49 = (org.springframework.expression.AccessException) $r29\", \"$r38 = virtualinvoke r49.<org.springframework.expression.AccessException: java.lang.String getMessage()>()\", \"$r31[2] = $r38\", \"specialinvoke r45.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r29, $r33, $r31)\", \"r50 = (java.lang.Throwable) r45\", \"throw r50\"],\"getValueInternal\":null,\"throwIfNotNullSafe\":null,\"getArguments\":null,\"getArgumentTypes\":null,\"getCachedExecutor\":null,\"findAccessorForMethod\":null,\"throwSimpleExceptionIfPossible\":null,\"updateExitTypeDescriptor\":null,\"toStringAST.2\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()\"],\"toStringAST.3\":[\"$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)\", \"virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i0 = 0\", \"goto [?= $i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\", \"if i0 <= 0 goto $r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\"],\"toStringAST.10\":[\"$r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\", \"$r7 = interfaceinvoke $r6.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)\", \"i0 = i0 + 1\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i0 < $i1 goto (branch)\"],\"toStringAST.16\":[\"$r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r11\"],\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>\",\"getTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/ast/MethodReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/MethodReference.class",
            "qname": "org.springframework.expression.spel.ast.MethodReference.generateCode(MethodVisitor,CodeFlow)",
            "contained": true,
            "diff": "{\"lhs\" : {\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.MethodReference$CachedMethodExecutor cachedExecutor>\",\"cachedExecutor\":null,\"getName\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.String getName()>\",\"getValueRef\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r3 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r8 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r4 = virtualinvoke $r8.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"r5 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>(r1)\", \"r6 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>(r2, r3, r4, r5)\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>()\", \"return r6\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"throwIfNotNullSafe\":\"<org.springframework.expression.spel.ast.MethodReference: void throwIfNotNullSafe(java.util.List)>\",\"getArguments\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>\",\"getArgumentTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getArgumentTypes(java.lang.Object[])>\",\"getCachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor getCachedExecutor(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.util.List)>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,java.lang.Object,org.springframework.expression.EvaluationContext)>\",\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(java.lang.Object,org.springframework.expression.AccessException)>\",\"updateExitTypeDescriptor\":\"<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>\",\"toStringAST.2\":null,\"toStringAST.3\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3)\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i1 = 0\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i1 >= $i0 goto virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")\", \"if i1 <= 0 goto $r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\"],\"toStringAST.10\":[\"$r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\", \"$r8 = interfaceinvoke $r7.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)\", \"i1 = i1 + 1\", \"goto [?= $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\"],\"toStringAST.16\":[\"$r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r6\"],\"isCompilable\":\"<org.springframework.expression.spel.ast.MethodReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.MethodReference,org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"access$100\":\"<org.springframework.expression.spel.ast.MethodReference: void access$100(org.springframework.expression.spel.ast.MethodReference)>\",\"throwSimpleExceptionIfPossible\":null,\"getTypes\":null,\"findAccessorForMethod\":null},\"rhs\" : {\"cachedExecutor\":null,\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\",\"getName\":null,\"getValueRef\":null,\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"r3 = newarray (java.lang.Object)[$i0]\", \"i4 = 0\", \"goto [?= $i1 = lengthof r3]\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r4)\", \"$r5 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>\", \"$r6 = $r5[i4]\", \"$r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"r3[i4] = $r8\", \"goto [?= virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()]\", \"$r38 := @caughtexception\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"throw $r38\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"i4 = i4 + 1\", \"$i1 = lengthof r3\", \"if i4 < $i1 goto $r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"$r9 = virtualinvoke r2.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r9 != null goto r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"$z0 = r0.<org.springframework.expression.spel.ast.MethodReference: boolean nullSafe>\", \"if $z0 == 0 goto r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$r26 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>\", \"return $r26\", \"r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r22 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage METHOD_CALL_ON_NULL_OBJECT_NOT_ALLOWED>\", \"$r21 = newarray (java.lang.Object)[1]\", \"$r23 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r24 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"$r25 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>($r23, $r24)\", \"$r21[0] = $r25\", \"specialinvoke r44.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r22, $r21)\", \"r46 = (java.lang.Throwable) r44\", \"throw r46\", \"r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"if r40 == null goto $r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r16 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r17 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r18 = virtualinvoke $r17.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r19 = interfaceinvoke r40.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r16, $r18, r3)\", \"return $r19\", \"$r37 := @caughtexception\", \"r47 = (org.springframework.expression.AccessException) $r37\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r47)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = null\", \"$r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r11 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"r42 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>($r10, $r11, r1)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = r42\", \"$r12 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r13 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r14 = virtualinvoke $r13.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r15 = interfaceinvoke r42.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r12, $r14, r3)\", \"return $r15\", \"$r27 := @caughtexception\", \"r48 = (org.springframework.expression.AccessException) $r27\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r48)\", \"r45 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r31 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_METHOD_INVOCATION>\", \"$r29 = newarray (java.lang.Object)[3]\", \"$r30 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r29[0] = $r30\", \"$r32 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r33 = virtualinvoke $r32.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r34 = virtualinvoke $r33.<java.lang.Object: java.lang.Class getClass()>()\", \"$r35 = virtualinvoke $r34.<java.lang.Class: java.lang.String getName()>()\", \"$r29[1] = $r35\", \"r49 = (org.springframework.expression.AccessException) $r27\", \"$r36 = virtualinvoke r49.<org.springframework.expression.AccessException: java.lang.String getMessage()>()\", \"$r29[2] = $r36\", \"specialinvoke r45.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r27, $r31, $r29)\", \"r50 = (java.lang.Throwable) r45\", \"throw r50\"],\"getValueInternal\":null,\"throwIfNotNullSafe\":null,\"getArguments\":null,\"getArgumentTypes\":null,\"getCachedExecutor\":null,\"findAccessorForMethod\":null,\"throwSimpleExceptionIfPossible\":null,\"updateExitTypeDescriptor\":null,\"toStringAST.2\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()\"],\"toStringAST.3\":[\"$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)\", \"virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i0 = 0\", \"goto [?= $i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\", \"if i0 <= 0 goto $r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\"],\"toStringAST.10\":[\"$r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\", \"$r7 = interfaceinvoke $r6.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)\", \"i0 = i0 + 1\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i0 < $i1 goto (branch)\"],\"toStringAST.16\":[\"$r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r11\"],\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>\",\"getTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/ast/MethodReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/MethodReference.class",
            "qname": "org.springframework.expression.spel.ast.MethodReference.updateExitTypeDescriptor()",
            "contained": true,
            "diff": "{\"lhs\" : {\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.MethodReference$CachedMethodExecutor cachedExecutor>\",\"cachedExecutor\":null,\"getName\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.String getName()>\",\"getValueRef\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r3 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r8 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r4 = virtualinvoke $r8.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"r5 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>(r1)\", \"r6 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>(r2, r3, r4, r5)\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>()\", \"return r6\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"throwIfNotNullSafe\":\"<org.springframework.expression.spel.ast.MethodReference: void throwIfNotNullSafe(java.util.List)>\",\"getArguments\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>\",\"getArgumentTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getArgumentTypes(java.lang.Object[])>\",\"getCachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor getCachedExecutor(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.util.List)>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,java.lang.Object,org.springframework.expression.EvaluationContext)>\",\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(java.lang.Object,org.springframework.expression.AccessException)>\",\"updateExitTypeDescriptor\":\"<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>\",\"toStringAST.2\":null,\"toStringAST.3\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3)\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i1 = 0\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i1 >= $i0 goto virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")\", \"if i1 <= 0 goto $r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\"],\"toStringAST.10\":[\"$r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\", \"$r8 = interfaceinvoke $r7.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)\", \"i1 = i1 + 1\", \"goto [?= $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\"],\"toStringAST.16\":[\"$r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r6\"],\"isCompilable\":\"<org.springframework.expression.spel.ast.MethodReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.MethodReference,org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"access$100\":\"<org.springframework.expression.spel.ast.MethodReference: void access$100(org.springframework.expression.spel.ast.MethodReference)>\",\"throwSimpleExceptionIfPossible\":null,\"getTypes\":null,\"findAccessorForMethod\":null},\"rhs\" : {\"cachedExecutor\":null,\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\",\"getName\":null,\"getValueRef\":null,\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"r3 = newarray (java.lang.Object)[$i0]\", \"i4 = 0\", \"goto [?= $i1 = lengthof r3]\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r4)\", \"$r5 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>\", \"$r6 = $r5[i4]\", \"$r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"r3[i4] = $r8\", \"goto [?= virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()]\", \"$r27 := @caughtexception\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"throw $r27\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"i4 = i4 + 1\", \"$i1 = lengthof r3\", \"if i4 < $i1 goto $r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"$r9 = virtualinvoke r2.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r9 != null goto r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"$z0 = r0.<org.springframework.expression.spel.ast.MethodReference: boolean nullSafe>\", \"if $z0 == 0 goto r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$r26 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>\", \"return $r26\", \"r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r22 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage METHOD_CALL_ON_NULL_OBJECT_NOT_ALLOWED>\", \"$r21 = newarray (java.lang.Object)[1]\", \"$r23 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r24 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"$r25 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>($r23, $r24)\", \"$r21[0] = $r25\", \"specialinvoke r44.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r22, $r21)\", \"r46 = (java.lang.Throwable) r44\", \"throw r46\", \"r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"if r40 == null goto $r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r16 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r17 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r18 = virtualinvoke $r17.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r19 = interfaceinvoke r40.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r16, $r18, r3)\", \"return $r19\", \"$r28 := @caughtexception\", \"r47 = (org.springframework.expression.AccessException) $r28\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r47)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = null\", \"$r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r11 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"r42 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>($r10, $r11, r1)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = r42\", \"$r12 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r13 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r14 = virtualinvoke $r13.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r15 = interfaceinvoke r42.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r12, $r14, r3)\", \"return $r15\", \"$r29 := @caughtexception\", \"r48 = (org.springframework.expression.AccessException) $r29\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r48)\", \"r45 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r33 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_METHOD_INVOCATION>\", \"$r31 = newarray (java.lang.Object)[3]\", \"$r32 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r31[0] = $r32\", \"$r34 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r35 = virtualinvoke $r34.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r36 = virtualinvoke $r35.<java.lang.Object: java.lang.Class getClass()>()\", \"$r37 = virtualinvoke $r36.<java.lang.Class: java.lang.String getName()>()\", \"$r31[1] = $r37\", \"r49 = (org.springframework.expression.AccessException) $r29\", \"$r38 = virtualinvoke r49.<org.springframework.expression.AccessException: java.lang.String getMessage()>()\", \"$r31[2] = $r38\", \"specialinvoke r45.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r29, $r33, $r31)\", \"r50 = (java.lang.Throwable) r45\", \"throw r50\"],\"getValueInternal\":null,\"throwIfNotNullSafe\":null,\"getArguments\":null,\"getArgumentTypes\":null,\"getCachedExecutor\":null,\"findAccessorForMethod\":null,\"throwSimpleExceptionIfPossible\":null,\"updateExitTypeDescriptor\":null,\"toStringAST.2\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()\"],\"toStringAST.3\":[\"$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)\", \"virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i0 = 0\", \"goto [?= $i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\", \"if i0 <= 0 goto $r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\"],\"toStringAST.10\":[\"$r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\", \"$r7 = interfaceinvoke $r6.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)\", \"i0 = i0 + 1\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i0 < $i1 goto (branch)\"],\"toStringAST.16\":[\"$r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r11\"],\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>\",\"getTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/ast/MethodReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/MethodReference.class",
            "qname": "org.springframework.expression.spel.ast.MethodReference.updateExitTypeDescriptor()",
            "contained": true,
            "diff": "{\"lhs\" : {\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.MethodReference$CachedMethodExecutor cachedExecutor>\",\"cachedExecutor\":null,\"getName\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.String getName()>\",\"getValueRef\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r3 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r8 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"r4 = virtualinvoke $r8.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"r5 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>(r1)\", \"r6 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>(r2, r3, r4, r5)\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>()\", \"return r6\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"throwIfNotNullSafe\":\"<org.springframework.expression.spel.ast.MethodReference: void throwIfNotNullSafe(java.util.List)>\",\"getArguments\":\"<org.springframework.expression.spel.ast.MethodReference: java.lang.Object[] getArguments(org.springframework.expression.spel.ExpressionState)>\",\"getArgumentTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getArgumentTypes(java.lang.Object[])>\",\"getCachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor getCachedExecutor(org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.util.List)>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,java.lang.Object,org.springframework.expression.EvaluationContext)>\",\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(java.lang.Object,org.springframework.expression.AccessException)>\",\"updateExitTypeDescriptor\":\"<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>\",\"toStringAST.2\":null,\"toStringAST.3\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3)\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i1 = 0\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i1 >= $i0 goto virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")\", \"if i1 <= 0 goto $r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\"],\"toStringAST.10\":[\"$r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i1)\", \"$r8 = interfaceinvoke $r7.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)\", \"i1 = i1 + 1\", \"goto [?= $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\"],\"toStringAST.16\":[\"$r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r6\"],\"isCompilable\":\"<org.springframework.expression.spel.ast.MethodReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.MethodReference,org.springframework.expression.EvaluationContext,java.lang.Object,org.springframework.core.convert.TypeDescriptor,java.lang.Object[])>\",\"access$100\":\"<org.springframework.expression.spel.ast.MethodReference: void access$100(org.springframework.expression.spel.ast.MethodReference)>\",\"throwSimpleExceptionIfPossible\":null,\"getTypes\":null,\"findAccessorForMethod\":null},\"rhs\" : {\"cachedExecutor\":null,\"cachedExecutor\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\",\"getName\":null,\"getValueRef\":null,\"getValueInternal.2\":[\"r2 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"r3 = newarray (java.lang.Object)[$i0]\", \"i4 = 0\", \"goto [?= $i1 = lengthof r3]\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r4)\", \"$r5 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>\", \"$r6 = $r5[i4]\", \"$r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"r3[i4] = $r8\", \"goto [?= virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()]\", \"$r38 := @caughtexception\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"throw $r38\", \"virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>()\", \"i4 = i4 + 1\", \"$i1 = lengthof r3\", \"if i4 < $i1 goto $r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>()\", \"$r9 = virtualinvoke r2.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r9 != null goto r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"$z0 = r0.<org.springframework.expression.spel.ast.MethodReference: boolean nullSafe>\", \"if $z0 == 0 goto r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$r26 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>\", \"return $r26\", \"r44 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r22 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage METHOD_CALL_ON_NULL_OBJECT_NOT_ALLOWED>\", \"$r21 = newarray (java.lang.Object)[1]\", \"$r23 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r24 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"$r25 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>($r23, $r24)\", \"$r21[0] = $r25\", \"specialinvoke r44.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r22, $r21)\", \"r46 = (java.lang.Throwable) r44\", \"throw r46\", \"r40 = r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>\", \"if r40 == null goto $r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r16 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r17 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r18 = virtualinvoke $r17.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r19 = interfaceinvoke r40.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r16, $r18, r3)\", \"return $r19\", \"$r37 := @caughtexception\", \"r47 = (org.springframework.expression.AccessException) $r37\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r47)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = null\", \"$r10 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r11 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3)\", \"r42 = specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>($r10, $r11, r1)\", \"r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = r42\", \"$r12 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r13 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r14 = virtualinvoke $r13.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r15 = interfaceinvoke r42.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r12, $r14, r3)\", \"return $r15\", \"$r27 := @caughtexception\", \"r48 = (org.springframework.expression.AccessException) $r27\", \"specialinvoke r0.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r1, r48)\", \"r45 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>()\", \"$r31 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_METHOD_INVOCATION>\", \"$r29 = newarray (java.lang.Object)[3]\", \"$r30 = r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>\", \"$r29[0] = $r30\", \"$r32 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r33 = virtualinvoke $r32.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"$r34 = virtualinvoke $r33.<java.lang.Object: java.lang.Class getClass()>()\", \"$r35 = virtualinvoke $r34.<java.lang.Class: java.lang.String getName()>()\", \"$r29[1] = $r35\", \"r49 = (org.springframework.expression.AccessException) $r27\", \"$r36 = virtualinvoke r49.<org.springframework.expression.AccessException: java.lang.String getMessage()>()\", \"$r29[2] = $r36\", \"specialinvoke r45.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r27, $r31, $r29)\", \"r50 = (java.lang.Throwable) r45\", \"throw r50\"],\"getValueInternal\":null,\"throwIfNotNullSafe\":null,\"getArguments\":null,\"getArgumentTypes\":null,\"getCachedExecutor\":null,\"findAccessorForMethod\":null,\"throwSimpleExceptionIfPossible\":null,\"updateExitTypeDescriptor\":null,\"toStringAST.2\":[\"specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()\"],\"toStringAST.3\":[\"$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)\", \"virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")\", \"i0 = 0\", \"goto [?= $i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()]\", \"if i0 <= 0 goto $r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\"],\"toStringAST.10\":[\"$r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0)\", \"$r7 = interfaceinvoke $r6.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>()\", \"virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)\", \"i0 = i0 + 1\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>()\", \"if i0 < $i1 goto (branch)\"],\"toStringAST.16\":[\"$r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()\", \"return $r11\"],\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"throwSimpleExceptionIfPossible\":\"<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>\",\"getTypes\":\"<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>\",\"findAccessorForMethod\":\"<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference",
            "contained": true,
            "diff": "{\"lhs\" : {\"getValueRef\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r6 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"r2 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>($r5, $r6, $z0)\", \"r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedReadAccessor>\", \"$z1 = r3 instanceof org.springframework.expression.spel.CompilablePropertyAccessor\", \"if $z1 == 0 goto return r2\", \"r4 = (org.springframework.expression.spel.CompilablePropertyAccessor) r3\", \"$r8 = interfaceinvoke r4.<org.springframework.expression.spel.CompilablePropertyAccessor: java.lang.Class getPropertyType()>()\", \"$r9 = staticinvoke <org.springframework.expression.spel.CodeFlow: java.lang.String toDescriptor(java.lang.Class)>($r8)\", \"r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String exitTypeDescriptor> = $r9\", \"return r2\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"setValue.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r5 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>($r3, $r4, $r5, r2)\"],\"isWritable.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>($r2, $r3, $r4)\"],\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Object,java.util.List)>\",\"isCompilable\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"access$100\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor access$100(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$200\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String access$200(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$300\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void access$300(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null},\"rhs\" : {\"getValueRef\":null,\"getValueInternal.2\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r3)\", \"$r4 = virtualinvoke r50.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r4 != null goto return r50\", \"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r5.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"if $z0 == 0 goto return r50\", \"$r6 = newarray (java.lang.Class)[2]\", \"$r6[0] = class \"Lorg/springframework/expression/spel/ast/Indexer;\"\", \"$r6[1] = class \"Lorg/springframework/expression/spel/ast/PropertyOrFieldReference;\"\", \"$z1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nextChildIs(java.lang.Class[])>($r6)\", \"if $z1 == 0 goto return r50\", \"r2 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r7 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z2 != 0 goto $r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r17 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z6 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/Map;\")\", \"if $z6 == 0 goto $z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$z5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z5 == 0 goto return r50\", \"$r13 = class \"Ljava/util/ArrayList;\"\", \"$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.Object newInstance()>()\", \"r51 = (java.util.List) $r14\", \"$r15 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r15, r51)\", \"$r16 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r16)\", \"goto [?= return r50]\", \"$r22 := @caughtexception\", \"r60 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r25 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r24 = newarray (java.lang.Object)[0]\", \"specialinvoke r60.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r22, $r25, $r24)\", \"r66 = (java.lang.Throwable) r60\", \"throw r66\", \"$r46 := @caughtexception\", \"r61 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r49 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r48 = newarray (java.lang.Object)[0]\", \"specialinvoke r61.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i5, $r46, $r49, $r48)\", \"r67 = (java.lang.Throwable) r61\", \"throw r67\", \"$z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z4 == 0 goto return r50\", \"$r9 = class \"Ljava/util/HashMap;\"\", \"$r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>()\", \"r54 = (java.util.Map) $r10\", \"$r11 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r11, r54)\", \"$r12 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r12)\", \"goto [?= return r50]\", \"$r26 := @caughtexception\", \"r62 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r29 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r28 = newarray (java.lang.Object)[0]\", \"specialinvoke r62.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r26, $r29, $r28)\", \"r68 = (java.lang.Throwable) r62\", \"throw r68\", \"$r36 := @caughtexception\", \"r63 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r39 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r38 = newarray (java.lang.Object)[0]\", \"specialinvoke r63.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r36, $r39, $r38)\", \"r69 = (java.lang.Throwable) r63\", \"throw r69\", \"$z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z7 == 0 goto return r50\", \"$r18 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r19 = virtualinvoke $r18.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"r57 = virtualinvoke $r19.<java.lang.Class: java.lang.Object newInstance()>()\", \"$r20 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r20, r57)\", \"$r21 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r21)\", \"goto [?= return r50]\", \"$r40 := @caughtexception\", \"r64 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r43 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r42 = newarray (java.lang.Object)[1]\", \"$r44 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r45 = virtualinvoke $r44.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r42[0] = $r45\", \"specialinvoke r64.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i4, $r40, $r43, $r42)\", \"r70 = (java.lang.Throwable) r64\", \"throw r70\", \"$r30 := @caughtexception\", \"r65 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r33 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r32 = newarray (java.lang.Object)[1]\", \"$r34 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r35 = virtualinvoke $r34.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r32[0] = $r35\", \"specialinvoke r65.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r30, $r33, $r32)\", \"r71 = (java.lang.Throwable) r65\", \"throw r71\", \"return r50\"],\"getValueInternal\":null,\"setValue.3\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r3, r2)\"],\"isWritable.3\":[\"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>($r2, r1)\"],\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null,\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"access$200\":null,\"access$300\":null,\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Class,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference",
            "contained": true,
            "diff": "{\"lhs\" : {\"getValueRef\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r6 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"r2 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>($r5, $r6, $z0)\", \"r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedReadAccessor>\", \"$z1 = r3 instanceof org.springframework.expression.spel.CompilablePropertyAccessor\", \"if $z1 == 0 goto return r2\", \"r4 = (org.springframework.expression.spel.CompilablePropertyAccessor) r3\", \"$r8 = interfaceinvoke r4.<org.springframework.expression.spel.CompilablePropertyAccessor: java.lang.Class getPropertyType()>()\", \"$r9 = staticinvoke <org.springframework.expression.spel.CodeFlow: java.lang.String toDescriptor(java.lang.Class)>($r8)\", \"r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String exitTypeDescriptor> = $r9\", \"return r2\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"setValue.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r5 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>($r3, $r4, $r5, r2)\"],\"isWritable.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>($r2, $r3, $r4)\"],\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Object,java.util.List)>\",\"isCompilable\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"access$100\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor access$100(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$200\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String access$200(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$300\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void access$300(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null},\"rhs\" : {\"getValueRef\":null,\"getValueInternal.2\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r3)\", \"$r4 = virtualinvoke r50.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r4 != null goto return r50\", \"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r5.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"if $z0 == 0 goto return r50\", \"$r6 = newarray (java.lang.Class)[2]\", \"$r6[0] = class \"Lorg/springframework/expression/spel/ast/Indexer;\"\", \"$r6[1] = class \"Lorg/springframework/expression/spel/ast/PropertyOrFieldReference;\"\", \"$z1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nextChildIs(java.lang.Class[])>($r6)\", \"if $z1 == 0 goto return r50\", \"r2 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r7 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z2 != 0 goto $r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r17 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z6 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/Map;\")\", \"if $z6 == 0 goto $z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$z5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z5 == 0 goto return r50\", \"$r13 = class \"Ljava/util/ArrayList;\"\", \"$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.Object newInstance()>()\", \"r51 = (java.util.List) $r14\", \"$r15 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r15, r51)\", \"$r16 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r16)\", \"goto [?= return r50]\", \"$r22 := @caughtexception\", \"r60 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r25 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r24 = newarray (java.lang.Object)[0]\", \"specialinvoke r60.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r22, $r25, $r24)\", \"r66 = (java.lang.Throwable) r60\", \"throw r66\", \"$r42 := @caughtexception\", \"r61 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r45 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r44 = newarray (java.lang.Object)[0]\", \"specialinvoke r61.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i4, $r42, $r45, $r44)\", \"r67 = (java.lang.Throwable) r61\", \"throw r67\", \"$z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z4 == 0 goto return r50\", \"$r9 = class \"Ljava/util/HashMap;\"\", \"$r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>()\", \"r54 = (java.util.Map) $r10\", \"$r11 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r11, r54)\", \"$r12 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r12)\", \"goto [?= return r50]\", \"$r38 := @caughtexception\", \"r62 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r41 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r40 = newarray (java.lang.Object)[0]\", \"specialinvoke r62.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r38, $r41, $r40)\", \"r68 = (java.lang.Throwable) r62\", \"throw r68\", \"$r46 := @caughtexception\", \"r63 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r49 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r48 = newarray (java.lang.Object)[0]\", \"specialinvoke r63.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i5, $r46, $r49, $r48)\", \"r69 = (java.lang.Throwable) r63\", \"throw r69\", \"$z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z7 == 0 goto return r50\", \"$r18 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r19 = virtualinvoke $r18.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"r57 = virtualinvoke $r19.<java.lang.Class: java.lang.Object newInstance()>()\", \"$r20 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r20, r57)\", \"$r21 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r21)\", \"goto [?= return r50]\", \"$r32 := @caughtexception\", \"r64 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r35 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r34 = newarray (java.lang.Object)[1]\", \"$r36 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r37 = virtualinvoke $r36.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r34[0] = $r37\", \"specialinvoke r64.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r32, $r35, $r34)\", \"r70 = (java.lang.Throwable) r64\", \"throw r70\", \"$r26 := @caughtexception\", \"r65 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r29 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r28 = newarray (java.lang.Object)[1]\", \"$r30 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r31 = virtualinvoke $r30.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r28[0] = $r31\", \"specialinvoke r65.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r26, $r29, $r28)\", \"r71 = (java.lang.Throwable) r65\", \"throw r71\", \"return r50\"],\"getValueInternal\":null,\"setValue.3\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r3, r2)\"],\"isWritable.3\":[\"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>($r2, r1)\"],\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null,\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"access$200\":null,\"access$300\":null,\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Class,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue",
            "contained": false,
            "diff": null,
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue",
            "contained": false,
            "diff": null,
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue()",
            "contained": false,
            "diff": null,
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue()",
            "contained": false,
            "diff": null,
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference.generateCode(MethodVisitor,CodeFlow)",
            "contained": true,
            "diff": "{\"lhs\" : {\"getValueRef\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r6 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"r2 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>($r5, $r6, $z0)\", \"r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedReadAccessor>\", \"$z1 = r3 instanceof org.springframework.expression.spel.CompilablePropertyAccessor\", \"if $z1 == 0 goto return r2\", \"r4 = (org.springframework.expression.spel.CompilablePropertyAccessor) r3\", \"$r8 = interfaceinvoke r4.<org.springframework.expression.spel.CompilablePropertyAccessor: java.lang.Class getPropertyType()>()\", \"$r9 = staticinvoke <org.springframework.expression.spel.CodeFlow: java.lang.String toDescriptor(java.lang.Class)>($r8)\", \"r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String exitTypeDescriptor> = $r9\", \"return r2\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"setValue.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r5 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>($r3, $r4, $r5, r2)\"],\"isWritable.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>($r2, $r3, $r4)\"],\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Object,java.util.List)>\",\"isCompilable\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"access$100\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor access$100(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$200\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String access$200(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$300\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void access$300(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null},\"rhs\" : {\"getValueRef\":null,\"getValueInternal.2\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r3)\", \"$r4 = virtualinvoke r50.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r4 != null goto return r50\", \"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r5.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"if $z0 == 0 goto return r50\", \"$r6 = newarray (java.lang.Class)[2]\", \"$r6[0] = class \"Lorg/springframework/expression/spel/ast/Indexer;\"\", \"$r6[1] = class \"Lorg/springframework/expression/spel/ast/PropertyOrFieldReference;\"\", \"$z1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nextChildIs(java.lang.Class[])>($r6)\", \"if $z1 == 0 goto return r50\", \"r2 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r7 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z2 != 0 goto $r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r17 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z6 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/Map;\")\", \"if $z6 == 0 goto $z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$z5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z5 == 0 goto return r50\", \"$r13 = class \"Ljava/util/ArrayList;\"\", \"$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.Object newInstance()>()\", \"r51 = (java.util.List) $r14\", \"$r15 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r15, r51)\", \"$r16 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r16)\", \"goto [?= return r50]\", \"$r36 := @caughtexception\", \"r60 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r39 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r38 = newarray (java.lang.Object)[0]\", \"specialinvoke r60.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r36, $r39, $r38)\", \"r66 = (java.lang.Throwable) r60\", \"throw r66\", \"$r46 := @caughtexception\", \"r61 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r49 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r48 = newarray (java.lang.Object)[0]\", \"specialinvoke r61.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i5, $r46, $r49, $r48)\", \"r67 = (java.lang.Throwable) r61\", \"throw r67\", \"$z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z4 == 0 goto return r50\", \"$r9 = class \"Ljava/util/HashMap;\"\", \"$r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>()\", \"r54 = (java.util.Map) $r10\", \"$r11 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r11, r54)\", \"$r12 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r12)\", \"goto [?= return r50]\", \"$r32 := @caughtexception\", \"r62 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r35 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r34 = newarray (java.lang.Object)[0]\", \"specialinvoke r62.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r32, $r35, $r34)\", \"r68 = (java.lang.Throwable) r62\", \"throw r68\", \"$r28 := @caughtexception\", \"r63 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r31 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r30 = newarray (java.lang.Object)[0]\", \"specialinvoke r63.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r28, $r31, $r30)\", \"r69 = (java.lang.Throwable) r63\", \"throw r69\", \"$z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z7 == 0 goto return r50\", \"$r18 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r19 = virtualinvoke $r18.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"r57 = virtualinvoke $r19.<java.lang.Class: java.lang.Object newInstance()>()\", \"$r20 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r20, r57)\", \"$r21 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r21)\", \"goto [?= return r50]\", \"$r40 := @caughtexception\", \"r64 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r43 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r42 = newarray (java.lang.Object)[1]\", \"$r44 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r45 = virtualinvoke $r44.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r42[0] = $r45\", \"specialinvoke r64.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i4, $r40, $r43, $r42)\", \"r70 = (java.lang.Throwable) r64\", \"throw r70\", \"$r22 := @caughtexception\", \"r65 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r25 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r24 = newarray (java.lang.Object)[1]\", \"$r26 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r27 = virtualinvoke $r26.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r24[0] = $r27\", \"specialinvoke r65.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r22, $r25, $r24)\", \"r71 = (java.lang.Throwable) r65\", \"throw r71\", \"return r50\"],\"getValueInternal\":null,\"setValue.3\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r3, r2)\"],\"isWritable.3\":[\"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>($r2, r1)\"],\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null,\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"access$200\":null,\"access$300\":null,\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Class,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference.generateCode(MethodVisitor,CodeFlow)",
            "contained": true,
            "diff": "{\"lhs\" : {\"getValueRef\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r6 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"r2 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>($r5, $r6, $z0)\", \"r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedReadAccessor>\", \"$z1 = r3 instanceof org.springframework.expression.spel.CompilablePropertyAccessor\", \"if $z1 == 0 goto return r2\", \"r4 = (org.springframework.expression.spel.CompilablePropertyAccessor) r3\", \"$r8 = interfaceinvoke r4.<org.springframework.expression.spel.CompilablePropertyAccessor: java.lang.Class getPropertyType()>()\", \"$r9 = staticinvoke <org.springframework.expression.spel.CodeFlow: java.lang.String toDescriptor(java.lang.Class)>($r8)\", \"r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String exitTypeDescriptor> = $r9\", \"return r2\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"setValue.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r5 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>($r3, $r4, $r5, r2)\"],\"isWritable.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>($r2, $r3, $r4)\"],\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Object,java.util.List)>\",\"isCompilable\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"access$100\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor access$100(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$200\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String access$200(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$300\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void access$300(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null},\"rhs\" : {\"getValueRef\":null,\"getValueInternal.2\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r3)\", \"$r4 = virtualinvoke r50.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r4 != null goto return r50\", \"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r5.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"if $z0 == 0 goto return r50\", \"$r6 = newarray (java.lang.Class)[2]\", \"$r6[0] = class \"Lorg/springframework/expression/spel/ast/Indexer;\"\", \"$r6[1] = class \"Lorg/springframework/expression/spel/ast/PropertyOrFieldReference;\"\", \"$z1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nextChildIs(java.lang.Class[])>($r6)\", \"if $z1 == 0 goto return r50\", \"r2 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r7 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z2 != 0 goto $r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r17 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z6 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/Map;\")\", \"if $z6 == 0 goto $z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$z5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z5 == 0 goto return r50\", \"$r13 = class \"Ljava/util/ArrayList;\"\", \"$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.Object newInstance()>()\", \"r51 = (java.util.List) $r14\", \"$r15 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r15, r51)\", \"$r16 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r16)\", \"goto [?= return r50]\", \"$r22 := @caughtexception\", \"r60 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r25 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r24 = newarray (java.lang.Object)[0]\", \"specialinvoke r60.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r22, $r25, $r24)\", \"r66 = (java.lang.Throwable) r60\", \"throw r66\", \"$r42 := @caughtexception\", \"r61 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r45 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r44 = newarray (java.lang.Object)[0]\", \"specialinvoke r61.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i4, $r42, $r45, $r44)\", \"r67 = (java.lang.Throwable) r61\", \"throw r67\", \"$z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z4 == 0 goto return r50\", \"$r9 = class \"Ljava/util/HashMap;\"\", \"$r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>()\", \"r54 = (java.util.Map) $r10\", \"$r11 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r11, r54)\", \"$r12 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r12)\", \"goto [?= return r50]\", \"$r38 := @caughtexception\", \"r62 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r41 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r40 = newarray (java.lang.Object)[0]\", \"specialinvoke r62.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r38, $r41, $r40)\", \"r68 = (java.lang.Throwable) r62\", \"throw r68\", \"$r46 := @caughtexception\", \"r63 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r49 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r48 = newarray (java.lang.Object)[0]\", \"specialinvoke r63.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i5, $r46, $r49, $r48)\", \"r69 = (java.lang.Throwable) r63\", \"throw r69\", \"$z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z7 == 0 goto return r50\", \"$r18 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r19 = virtualinvoke $r18.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"r57 = virtualinvoke $r19.<java.lang.Class: java.lang.Object newInstance()>()\", \"$r20 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r20, r57)\", \"$r21 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r21)\", \"goto [?= return r50]\", \"$r32 := @caughtexception\", \"r64 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r35 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r34 = newarray (java.lang.Object)[1]\", \"$r36 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r37 = virtualinvoke $r36.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r34[0] = $r37\", \"specialinvoke r64.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r32, $r35, $r34)\", \"r70 = (java.lang.Throwable) r64\", \"throw r70\", \"$r26 := @caughtexception\", \"r65 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r29 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r28 = newarray (java.lang.Object)[1]\", \"$r30 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r31 = virtualinvoke $r30.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r28[0] = $r31\", \"specialinvoke r65.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r26, $r29, $r28)\", \"r71 = (java.lang.Throwable) r65\", \"throw r71\", \"return r50\"],\"getValueInternal\":null,\"setValue.3\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r3, r2)\"],\"isWritable.3\":[\"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>($r2, r1)\"],\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null,\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"access$200\":null,\"access$300\":null,\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Class,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(ExpressionState)",
            "contained": true,
            "diff": "{\"lhs\" : {\"2\":[\"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r6 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"r2 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>($r5, $r6, $z0)\", \"r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedReadAccessor>\", \"$z1 = r3 instanceof org.springframework.expression.spel.CompilablePropertyAccessor\", \"if $z1 == 0 goto return r2\", \"r4 = (org.springframework.expression.spel.CompilablePropertyAccessor) r3\", \"$r8 = interfaceinvoke r4.<org.springframework.expression.spel.CompilablePropertyAccessor: java.lang.Class getPropertyType()>()\", \"$r9 = staticinvoke <org.springframework.expression.spel.CodeFlow: java.lang.String toDescriptor(java.lang.Class)>($r8)\", \"r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String exitTypeDescriptor> = $r9\", \"return r2\"]},\"rhs\" : {\"2\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r3)\", \"$r4 = virtualinvoke r50.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r4 != null goto return r50\", \"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r5.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"if $z0 == 0 goto return r50\", \"$r6 = newarray (java.lang.Class)[2]\", \"$r6[0] = class \"Lorg/springframework/expression/spel/ast/Indexer;\"\", \"$r6[1] = class \"Lorg/springframework/expression/spel/ast/PropertyOrFieldReference;\"\", \"$z1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nextChildIs(java.lang.Class[])>($r6)\", \"if $z1 == 0 goto return r50\", \"r2 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r7 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z2 != 0 goto $r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r17 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z6 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/Map;\")\", \"if $z6 == 0 goto $z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$z5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z5 == 0 goto return r50\", \"$r13 = class \"Ljava/util/ArrayList;\"\", \"$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.Object newInstance()>()\", \"r51 = (java.util.List) $r14\", \"$r15 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r15, r51)\", \"$r16 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r16)\", \"goto [?= return r50]\", \"$r22 := @caughtexception\", \"r60 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r25 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r24 = newarray (java.lang.Object)[0]\", \"specialinvoke r60.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r22, $r25, $r24)\", \"r66 = (java.lang.Throwable) r60\", \"throw r66\", \"$r46 := @caughtexception\", \"r61 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r49 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r48 = newarray (java.lang.Object)[0]\", \"specialinvoke r61.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i5, $r46, $r49, $r48)\", \"r67 = (java.lang.Throwable) r61\", \"throw r67\", \"$z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z4 == 0 goto return r50\", \"$r9 = class \"Ljava/util/HashMap;\"\", \"$r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>()\", \"r54 = (java.util.Map) $r10\", \"$r11 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r11, r54)\", \"$r12 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r12)\", \"goto [?= return r50]\", \"$r26 := @caughtexception\", \"r62 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r29 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r28 = newarray (java.lang.Object)[0]\", \"specialinvoke r62.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r26, $r29, $r28)\", \"r68 = (java.lang.Throwable) r62\", \"throw r68\", \"$r36 := @caughtexception\", \"r63 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r39 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r38 = newarray (java.lang.Object)[0]\", \"specialinvoke r63.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r36, $r39, $r38)\", \"r69 = (java.lang.Throwable) r63\", \"throw r69\", \"$z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z7 == 0 goto return r50\", \"$r18 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r19 = virtualinvoke $r18.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"r57 = virtualinvoke $r19.<java.lang.Class: java.lang.Object newInstance()>()\", \"$r20 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r20, r57)\", \"$r21 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r21)\", \"goto [?= return r50]\", \"$r40 := @caughtexception\", \"r64 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r43 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r42 = newarray (java.lang.Object)[1]\", \"$r44 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r45 = virtualinvoke $r44.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r42[0] = $r45\", \"specialinvoke r64.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i4, $r40, $r43, $r42)\", \"r70 = (java.lang.Throwable) r64\", \"throw r70\", \"$r30 := @caughtexception\", \"r65 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r33 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r32 = newarray (java.lang.Object)[1]\", \"$r34 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r35 = virtualinvoke $r34.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r32[0] = $r35\", \"specialinvoke r65.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r30, $r33, $r32)\", \"r71 = (java.lang.Throwable) r65\", \"throw r71\", \"return r50\"]}}",
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(ExpressionState)",
            "contained": true,
            "diff": "{\"lhs\" : {\"2\":[\"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r6 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"r2 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>($r5, $r6, $z0)\", \"r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedReadAccessor>\", \"$z1 = r3 instanceof org.springframework.expression.spel.CompilablePropertyAccessor\", \"if $z1 == 0 goto return r2\", \"r4 = (org.springframework.expression.spel.CompilablePropertyAccessor) r3\", \"$r8 = interfaceinvoke r4.<org.springframework.expression.spel.CompilablePropertyAccessor: java.lang.Class getPropertyType()>()\", \"$r9 = staticinvoke <org.springframework.expression.spel.CodeFlow: java.lang.String toDescriptor(java.lang.Class)>($r8)\", \"r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String exitTypeDescriptor> = $r9\", \"return r2\"]},\"rhs\" : {\"2\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r3)\", \"$r4 = virtualinvoke r50.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r4 != null goto return r50\", \"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r5.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"if $z0 == 0 goto return r50\", \"$r6 = newarray (java.lang.Class)[2]\", \"$r6[0] = class \"Lorg/springframework/expression/spel/ast/Indexer;\"\", \"$r6[1] = class \"Lorg/springframework/expression/spel/ast/PropertyOrFieldReference;\"\", \"$z1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nextChildIs(java.lang.Class[])>($r6)\", \"if $z1 == 0 goto return r50\", \"r2 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r7 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z2 != 0 goto $r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r17 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z6 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/Map;\")\", \"if $z6 == 0 goto $z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$z5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z5 == 0 goto return r50\", \"$r13 = class \"Ljava/util/ArrayList;\"\", \"$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.Object newInstance()>()\", \"r51 = (java.util.List) $r14\", \"$r15 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r15, r51)\", \"$r16 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r16)\", \"goto [?= return r50]\", \"$r22 := @caughtexception\", \"r60 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r25 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r24 = newarray (java.lang.Object)[0]\", \"specialinvoke r60.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r22, $r25, $r24)\", \"r66 = (java.lang.Throwable) r60\", \"throw r66\", \"$r42 := @caughtexception\", \"r61 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r45 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r44 = newarray (java.lang.Object)[0]\", \"specialinvoke r61.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i4, $r42, $r45, $r44)\", \"r67 = (java.lang.Throwable) r61\", \"throw r67\", \"$z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z4 == 0 goto return r50\", \"$r9 = class \"Ljava/util/HashMap;\"\", \"$r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>()\", \"r54 = (java.util.Map) $r10\", \"$r11 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r11, r54)\", \"$r12 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r12)\", \"goto [?= return r50]\", \"$r38 := @caughtexception\", \"r62 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r41 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r40 = newarray (java.lang.Object)[0]\", \"specialinvoke r62.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r38, $r41, $r40)\", \"r68 = (java.lang.Throwable) r62\", \"throw r68\", \"$r46 := @caughtexception\", \"r63 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r49 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r48 = newarray (java.lang.Object)[0]\", \"specialinvoke r63.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i5, $r46, $r49, $r48)\", \"r69 = (java.lang.Throwable) r63\", \"throw r69\", \"$z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z7 == 0 goto return r50\", \"$r18 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r19 = virtualinvoke $r18.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"r57 = virtualinvoke $r19.<java.lang.Class: java.lang.Object newInstance()>()\", \"$r20 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r20, r57)\", \"$r21 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r21)\", \"goto [?= return r50]\", \"$r32 := @caughtexception\", \"r64 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r35 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r34 = newarray (java.lang.Object)[1]\", \"$r36 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r37 = virtualinvoke $r36.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r34[0] = $r37\", \"specialinvoke r64.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r32, $r35, $r34)\", \"r70 = (java.lang.Throwable) r64\", \"throw r70\", \"$r26 := @caughtexception\", \"r65 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r29 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r28 = newarray (java.lang.Object)[1]\", \"$r30 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r31 = virtualinvoke $r30.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r28[0] = $r31\", \"specialinvoke r65.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r26, $r29, $r28)\", \"r71 = (java.lang.Throwable) r65\", \"throw r71\", \"return r50\"]}}",
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/1db7e02de3eb0c011ee6681f5a12eb9d166fea8/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference.setExitTypeDescriptor(String)",
            "contained": true,
            "diff": "{\"lhs\" : {\"getValueRef\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r6 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"r2 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>($r5, $r6, $z0)\", \"r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedReadAccessor>\", \"$z1 = r3 instanceof org.springframework.expression.spel.CompilablePropertyAccessor\", \"if $z1 == 0 goto return r2\", \"r4 = (org.springframework.expression.spel.CompilablePropertyAccessor) r3\", \"$r8 = interfaceinvoke r4.<org.springframework.expression.spel.CompilablePropertyAccessor: java.lang.Class getPropertyType()>()\", \"$r9 = staticinvoke <org.springframework.expression.spel.CodeFlow: java.lang.String toDescriptor(java.lang.Class)>($r8)\", \"r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String exitTypeDescriptor> = $r9\", \"return r2\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"setValue.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r5 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>($r3, $r4, $r5, r2)\"],\"isWritable.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>($r2, $r3, $r4)\"],\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Object,java.util.List)>\",\"isCompilable\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"access$100\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor access$100(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$200\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String access$200(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$300\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void access$300(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null},\"rhs\" : {\"getValueRef\":null,\"getValueInternal.2\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r3)\", \"$r4 = virtualinvoke r50.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r4 != null goto return r50\", \"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r5.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"if $z0 == 0 goto return r50\", \"$r6 = newarray (java.lang.Class)[2]\", \"$r6[0] = class \"Lorg/springframework/expression/spel/ast/Indexer;\"\", \"$r6[1] = class \"Lorg/springframework/expression/spel/ast/PropertyOrFieldReference;\"\", \"$z1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nextChildIs(java.lang.Class[])>($r6)\", \"if $z1 == 0 goto return r50\", \"r2 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r7 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z2 != 0 goto $r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r17 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z6 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/Map;\")\", \"if $z6 == 0 goto $z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$z5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z5 == 0 goto return r50\", \"$r13 = class \"Ljava/util/ArrayList;\"\", \"$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.Object newInstance()>()\", \"r51 = (java.util.List) $r14\", \"$r15 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r15, r51)\", \"$r16 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r16)\", \"goto [?= return r50]\", \"$r22 := @caughtexception\", \"r60 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r25 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r24 = newarray (java.lang.Object)[0]\", \"specialinvoke r60.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r22, $r25, $r24)\", \"r66 = (java.lang.Throwable) r60\", \"throw r66\", \"$r46 := @caughtexception\", \"r61 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r49 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r48 = newarray (java.lang.Object)[0]\", \"specialinvoke r61.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i5, $r46, $r49, $r48)\", \"r67 = (java.lang.Throwable) r61\", \"throw r67\", \"$z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z4 == 0 goto return r50\", \"$r9 = class \"Ljava/util/HashMap;\"\", \"$r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>()\", \"r54 = (java.util.Map) $r10\", \"$r11 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r11, r54)\", \"$r12 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r12)\", \"goto [?= return r50]\", \"$r26 := @caughtexception\", \"r62 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r29 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r28 = newarray (java.lang.Object)[0]\", \"specialinvoke r62.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r26, $r29, $r28)\", \"r68 = (java.lang.Throwable) r62\", \"throw r68\", \"$r36 := @caughtexception\", \"r63 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r39 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r38 = newarray (java.lang.Object)[0]\", \"specialinvoke r63.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r36, $r39, $r38)\", \"r69 = (java.lang.Throwable) r63\", \"throw r69\", \"$z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z7 == 0 goto return r50\", \"$r18 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r19 = virtualinvoke $r18.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"r57 = virtualinvoke $r19.<java.lang.Class: java.lang.Object newInstance()>()\", \"$r20 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r20, r57)\", \"$r21 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r21)\", \"goto [?= return r50]\", \"$r40 := @caughtexception\", \"r64 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r43 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r42 = newarray (java.lang.Object)[1]\", \"$r44 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r45 = virtualinvoke $r44.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r42[0] = $r45\", \"specialinvoke r64.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i4, $r40, $r43, $r42)\", \"r70 = (java.lang.Throwable) r64\", \"throw r70\", \"$r30 := @caughtexception\", \"r65 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r33 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r32 = newarray (java.lang.Object)[1]\", \"$r34 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r35 = virtualinvoke $r34.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r32[0] = $r35\", \"specialinvoke r65.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r30, $r33, $r32)\", \"r71 = (java.lang.Throwable) r65\", \"throw r71\", \"return r50\"],\"getValueInternal\":null,\"setValue.3\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r3, r2)\"],\"isWritable.3\":[\"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>($r2, r1)\"],\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null,\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"access$200\":null,\"access$300\":null,\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Class,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "1db7e02de3eb0c011ee6681f5a12eb9d166fea8"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "affectedFile": "/org/springframework/expression/spel/ast/PropertyOrFieldReference.class",
            "qname": "org.springframework.expression.spel.ast.PropertyOrFieldReference.setExitTypeDescriptor(String)",
            "contained": true,
            "diff": "{\"lhs\" : {\"getValueRef\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>\",\"getValueInternal.2\":[\"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r6 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r7 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"r2 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>($r5, $r6, $z0)\", \"r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedReadAccessor>\", \"$z1 = r3 instanceof org.springframework.expression.spel.CompilablePropertyAccessor\", \"if $z1 == 0 goto return r2\", \"r4 = (org.springframework.expression.spel.CompilablePropertyAccessor) r3\", \"$r8 = interfaceinvoke r4.<org.springframework.expression.spel.CompilablePropertyAccessor: java.lang.Class getPropertyType()>()\", \"$r9 = staticinvoke <org.springframework.expression.spel.CodeFlow: java.lang.String toDescriptor(java.lang.Class)>($r8)\", \"r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String exitTypeDescriptor> = $r9\", \"return r2\"],\"getValueInternal\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"setValue.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$r5 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>($r3, $r4, $r5, r2)\"],\"isWritable.3\":[\"$r3 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>()\", \"$r4 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>()\", \"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>($r2, $r3, $r4)\"],\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Object,java.util.List)>\",\"isCompilable\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isCompilable()>\",\"generateCode\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>\",\"access$000\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue access$000(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,boolean)>\",\"access$100\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor access$100(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$200\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String access$200(org.springframework.expression.spel.ast.PropertyOrFieldReference)>\",\"access$300\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void access$300(org.springframework.expression.spel.ast.PropertyOrFieldReference,org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String,java.lang.Object)>\",\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null},\"rhs\" : {\"getValueRef\":null,\"getValueInternal.2\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r3)\", \"$r4 = virtualinvoke r50.<org.springframework.expression.TypedValue: java.lang.Object getValue()>()\", \"if $r4 != null goto return r50\", \"$r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>()\", \"$z0 = virtualinvoke $r5.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>()\", \"if $z0 == 0 goto return r50\", \"$r6 = newarray (java.lang.Class)[2]\", \"$r6[0] = class \"Lorg/springframework/expression/spel/ast/Indexer;\"\", \"$r6[1] = class \"Lorg/springframework/expression/spel/ast/PropertyOrFieldReference;\"\", \"$z1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nextChildIs(java.lang.Class[])>($r6)\", \"if $z1 == 0 goto return r50\", \"r2 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r7 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z2 != 0 goto $r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r17 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z6 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/Map;\")\", \"if $z6 == 0 goto $z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$r8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Ljava/util/List;\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"$z5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z5 == 0 goto return r50\", \"$r13 = class \"Ljava/util/ArrayList;\"\", \"$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.Object newInstance()>()\", \"r51 = (java.util.List) $r14\", \"$r15 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r15, r51)\", \"$r16 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r16)\", \"goto [?= return r50]\", \"$r26 := @caughtexception\", \"r60 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r29 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r28 = newarray (java.lang.Object)[0]\", \"specialinvoke r60.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r26, $r29, $r28)\", \"r66 = (java.lang.Throwable) r60\", \"throw r66\", \"$r46 := @caughtexception\", \"r61 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r49 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>\", \"$r48 = newarray (java.lang.Object)[0]\", \"specialinvoke r61.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i5, $r46, $r49, $r48)\", \"r67 = (java.lang.Throwable) r61\", \"throw r67\", \"$z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z4 == 0 goto return r50\", \"$r9 = class \"Ljava/util/HashMap;\"\", \"$r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>()\", \"r54 = (java.util.Map) $r10\", \"$r11 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r11, r54)\", \"$r12 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r12)\", \"goto [?= return r50]\", \"$r42 := @caughtexception\", \"r62 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r45 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r44 = newarray (java.lang.Object)[0]\", \"specialinvoke r62.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i4, $r42, $r45, $r44)\", \"r68 = (java.lang.Throwable) r62\", \"throw r68\", \"$r22 := @caughtexception\", \"r63 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r25 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>\", \"$r24 = newarray (java.lang.Object)[0]\", \"specialinvoke r63.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r22, $r25, $r24)\", \"r69 = (java.lang.Throwable) r63\", \"throw r69\", \"$z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1)\", \"if $z7 == 0 goto return r50\", \"$r18 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r19 = virtualinvoke $r18.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"r57 = virtualinvoke $r19.<java.lang.Class: java.lang.Object newInstance()>()\", \"$r20 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r20, r57)\", \"$r21 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"r50 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r21)\", \"goto [?= return r50]\", \"$r36 := @caughtexception\", \"r64 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r39 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r38 = newarray (java.lang.Object)[1]\", \"$r40 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r41 = virtualinvoke $r40.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r38[0] = $r41\", \"specialinvoke r64.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r36, $r39, $r38)\", \"r70 = (java.lang.Throwable) r64\", \"throw r70\", \"$r30 := @caughtexception\", \"r65 = new org.springframework.expression.spel.SpelEvaluationException\", \"$i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>()\", \"$r33 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>\", \"$r32 = newarray (java.lang.Object)[1]\", \"$r34 = virtualinvoke r50.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>()\", \"$r35 = virtualinvoke $r34.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>()\", \"$r32[0] = $r35\", \"specialinvoke r65.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r30, $r33, $r32)\", \"r71 = (java.lang.Throwable) r65\", \"throw r71\", \"return r50\"],\"getValueInternal\":null,\"setValue.3\":[\"$r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>\", \"specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r3, r2)\"],\"isWritable.3\":[\"$z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>($r2, r1)\"],\"readProperty\":null,\"writeProperty\":null,\"isWritableProperty\":null,\"getPropertyAccessorsToTry\":null,\"isCompilable\":null,\"generateCode\":null,\"access$000\":null,\"access$100\":null,\"access$200\":null,\"access$300\":null,\"readProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>\",\"writeProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>\",\"isWritableProperty\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>\",\"getPropertyAccessorsToTry\":\"<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Class,org.springframework.expression.spel.ExpressionState)>\"}}",
            "commit": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/e0de9126ed8cf25cf141d3e66420da94e350708/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.class",
            "affectedFile": "/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.class",
            "qname": "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry",
            "contained": false,
            "diff": null,
            "commit": "e0de9126ed8cf25cf141d3e66420da94e350708"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/e0de9126ed8cf25cf141d3e66420da94e350708/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.class",
            "affectedFile": "/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.class",
            "qname": "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SimpMessageHeaderPropertyAccessor",
            "contained": false,
            "diff": null,
            "commit": "e0de9126ed8cf25cf141d3e66420da94e350708"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/e0de9126ed8cf25cf141d3e66420da94e350708/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.class",
            "affectedFile": "/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.class",
            "qname": "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SimpMessageHeaderPropertyAccessor.getSpecificTargetClasses()",
            "contained": false,
            "diff": null,
            "commit": "e0de9126ed8cf25cf141d3e66420da94e350708"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/e0de9126ed8cf25cf141d3e66420da94e350708/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.class",
            "affectedFile": "/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.class",
            "qname": "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SimpMessageHeaderPropertyAccessor.read(EvaluationContext,Object,String)",
            "contained": false,
            "diff": null,
            "commit": "e0de9126ed8cf25cf141d3e66420da94e350708"
        },
        {
            "ref_file": "/home/adann/Schreibtisch/test_compare_script/e0de9126ed8cf25cf141d3e66420da94e350708/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.class",
            "affectedFile": "/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.class",
            "qname": "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.filterSubscriptions(MultiValueMap,Message)",
            "contained": false,
            "diff": null,
            "commit": "e0de9126ed8cf25cf141d3e66420da94e350708"
        }
    ],
    "comment": "{\"artifacts\": [\"spring-expression\", \"spring-messaging\"], \"references\": [\"https://github.com/spring-projects/spring-framework/e0de9126ed8cf25cf141d3e66420da94e350708\"]}",
    "timestamp": "2018-11-30"
}