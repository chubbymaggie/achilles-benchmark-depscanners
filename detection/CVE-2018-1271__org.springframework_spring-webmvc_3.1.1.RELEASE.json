{
    "details": [
        {
            "qname": "org.springframework.web.reactive.resource.PathResourceResolver",
            "affectedFile": "/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "commit": "13356a7ee2240f740737c5c83bdccdacc30603a",
            "ref_file": "/data4/test_compare_script/13356a7ee2240f740737c5c83bdccdacc30603a/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.PathResourceResolver",
            "affectedFile": "/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "commit": "695bf2961feffd35b5560ccc982a2189dcca611",
            "ref_file": "/data4/test_compare_script/695bf2961feffd35b5560ccc982a2189dcca611/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.PathResourceResolver",
            "affectedFile": "/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "commit": "98ad23bef8e2e04143f8f5b201380543a8d8c0c",
            "ref_file": "/data4/test_compare_script/98ad23bef8e2e04143f8f5b201380543a8d8c0c/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.PathResourceResolver.getResource(String,Resource)",
            "affectedFile": "/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "commit": "695bf2961feffd35b5560ccc982a2189dcca611",
            "ref_file": "/data4/test_compare_script/695bf2961feffd35b5560ccc982a2189dcca611/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.PathResourceResolver.isInvalidEncodedPath(String)",
            "affectedFile": "/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "commit": "13356a7ee2240f740737c5c83bdccdacc30603a",
            "ref_file": "/data4/test_compare_script/13356a7ee2240f740737c5c83bdccdacc30603a/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.PathResourceResolver.isInvalidEncodedPath(String)",
            "affectedFile": "/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "commit": "695bf2961feffd35b5560ccc982a2189dcca611",
            "ref_file": "/data4/test_compare_script/695bf2961feffd35b5560ccc982a2189dcca611/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.PathResourceResolver.isInvalidEncodedPath(String)",
            "affectedFile": "/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "commit": "98ad23bef8e2e04143f8f5b201380543a8d8c0c",
            "ref_file": "/data4/test_compare_script/98ad23bef8e2e04143f8f5b201380543a8d8c0c/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.PathResourceResolver.isResourceUnderLocation(Resource,Resource)",
            "affectedFile": "/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "commit": "13356a7ee2240f740737c5c83bdccdacc30603a",
            "ref_file": "/data4/test_compare_script/13356a7ee2240f740737c5c83bdccdacc30603a/org/springframework/web/reactive/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandler",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandler",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "commit": "13356a7ee2240f740737c5c83bdccdacc30603a",
            "ref_file": "/data4/test_compare_script/13356a7ee2240f740737c5c83bdccdacc30603a/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandler.cleanDuplicateSlashes(String)",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandler.cleanLeadingSlash(String)",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandler.getResource(ServerWebExchange)",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandler.getResource(ServerWebExchange)",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "commit": "13356a7ee2240f740737c5c83bdccdacc30603a",
            "ref_file": "/data4/test_compare_script/13356a7ee2240f740737c5c83bdccdacc30603a/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandler.isInvalidEncodedPath(String)",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "commit": "13356a7ee2240f740737c5c83bdccdacc30603a",
            "ref_file": "/data4/test_compare_script/13356a7ee2240f740737c5c83bdccdacc30603a/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandler.processPath(String)",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandler.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandlerTests",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandlerTests.invalidPath()",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandlerTests.testInvalidPath()",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandlerTests.testInvalidPath(HttpMethod)",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandlerTests.testInvalidPath(HttpMethod,String,Resource)",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandlerTests.testInvalidPath(String,ResourceWebHandler)",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandlerTests.testResolvePathWithTraversal()",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandlerTests.testResolvePathWithTraversal(HttpMethod)",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.reactive.resource.ResourceWebHandlerTests.testResolvePathWithTraversal(HttpMethod,String,Resource)",
            "affectedFile": "/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/reactive/resource/ResourceWebHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "695bf2961feffd35b5560ccc982a2189dcca611",
            "ref_file": "/data4/test_compare_script/695bf2961feffd35b5560ccc982a2189dcca611/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "91b803a2310344d925e5d4b1709bbcea9037554",
            "ref_file": "/data4/test_compare_script/91b803a2310344d925e5d4b1709bbcea9037554/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "98ad23bef8e2e04143f8f5b201380543a8d8c0c",
            "ref_file": "/data4/test_compare_script/98ad23bef8e2e04143f8f5b201380543a8d8c0c/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "f59ea610dfcf55cd0b42f6dd76a9b3dab0218aa",
            "ref_file": "/data4/test_compare_script/f59ea610dfcf55cd0b42f6dd76a9b3dab0218aa/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver.getResource(String,Resource)",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "695bf2961feffd35b5560ccc982a2189dcca611",
            "ref_file": "/data4/test_compare_script/695bf2961feffd35b5560ccc982a2189dcca611/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver.isInvalidEncodedPath(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "695bf2961feffd35b5560ccc982a2189dcca611",
            "ref_file": "/data4/test_compare_script/695bf2961feffd35b5560ccc982a2189dcca611/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver.isInvalidEncodedPath(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "91b803a2310344d925e5d4b1709bbcea9037554",
            "ref_file": "/data4/test_compare_script/91b803a2310344d925e5d4b1709bbcea9037554/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver.isInvalidEncodedPath(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "98ad23bef8e2e04143f8f5b201380543a8d8c0c",
            "ref_file": "/data4/test_compare_script/98ad23bef8e2e04143f8f5b201380543a8d8c0c/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver.isInvalidEncodedPath(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver.isInvalidEncodedPath(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "f59ea610dfcf55cd0b42f6dd76a9b3dab0218aa",
            "ref_file": "/data4/test_compare_script/f59ea610dfcf55cd0b42f6dd76a9b3dab0218aa/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver.isResourceUnderLocation(Resource,Resource)",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "91b803a2310344d925e5d4b1709bbcea9037554",
            "ref_file": "/data4/test_compare_script/91b803a2310344d925e5d4b1709bbcea9037554/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver.isResourceUnderLocation(Resource,Resource)",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver.shouldEncodeRelativePath(Resource)",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "91b803a2310344d925e5d4b1709bbcea9037554",
            "ref_file": "/data4/test_compare_script/91b803a2310344d925e5d4b1709bbcea9037554/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.PathResourceResolver.shouldEncodeRelativePath(Resource)",
            "affectedFile": "/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/PathResourceResolver.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r31 = (java.lang.String) $r4\", \"if r31 != null goto r32 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r31)\", \"$r23 = new java.lang.IllegalStateException\", \"$r24 = new java.lang.StringBuilder\", \"specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r26 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29)\", \"throw $r23\", \"r32 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r31)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r32)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r32)\", \"if $z2 == 0 goto $z3 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r15 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r32, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>($r15)\", \"if $z5 == 0 goto (branch)\", \"$r16 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z6 == 0 goto return null\", \"$r18 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\"],\"getResource.43\":[\"specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r22)\"],\"getResource.50\":[\"goto [?= $r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r30 := @caughtexception\", \"$r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r34 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r33.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r34)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r37 = interfaceinvoke $r33.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r32, $r36)\", \"if r37 == null goto return r37\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r37\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r33, $r14)\", \"r38 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r37)\", \"return r38\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\"],\"getResource.43\":[\"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "91b803a2310344d925e5d4b1709bbcea9037554",
            "ref_file": "/data4/test_compare_script/91b803a2310344d925e5d4b1709bbcea9037554/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r37 = (java.lang.String) $r4\", \"if r37 != null goto r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$r29 = new java.lang.IllegalStateException\", \"$r30 = new java.lang.StringBuilder\", \"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r32 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35)\", \"throw $r29\", \"r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r38)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r38)\", \"if $z2 == 0 goto $z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"r39 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r38, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r39)\", \"if $z5 == 0 goto r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z8 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z8 == 0 goto return null\", \"$r24 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r23 = new java.lang.StringBuilder\", \"specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r24.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r28)\"],\"getResource.50\":[\"r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$z6 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r40)\", \"if $z6 == 0 goto (branch)\", \"$r15 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return null\", \"$r17 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21)\", \"return null\", \"goto [?= $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r36 := @caughtexception\", \"$r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r42 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r41.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r42)\", \"$r44 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r45 = interfaceinvoke $r41.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r38, $r44)\", \"if r45 == null goto return r45\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r45\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r41, $r14)\", \"r46 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r45)\", \"return r46\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"cleanDuplicateSlashes\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanDuplicateSlashes(java.lang.String)>\",\"cleanLeadingSlash\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanLeadingSlash(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r17 = new java.lang.StringBuilder\", \"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"cleanDuplicateSlashes\":null,\"cleanLeadingSlash\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r37 = (java.lang.String) $r4\", \"if r37 != null goto r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$r29 = new java.lang.IllegalStateException\", \"$r30 = new java.lang.StringBuilder\", \"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r32 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35)\", \"throw $r29\", \"r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r38)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r38)\", \"if $z2 == 0 goto $z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"r39 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r38, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r39)\", \"if $z5 == 0 goto r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z8 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z8 == 0 goto return null\", \"$r24 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r23 = new java.lang.StringBuilder\", \"specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r24.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r28)\"],\"getResource.50\":[\"r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$z6 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r40)\", \"if $z6 == 0 goto (branch)\", \"$r15 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return null\", \"$r17 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21)\", \"return null\", \"goto [?= $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r36 := @caughtexception\", \"$r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r42 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r41.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r42)\", \"$r44 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r45 = interfaceinvoke $r41.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r38, $r44)\", \"if r45 == null goto return r45\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r45\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r41, $r14)\", \"r46 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r45)\", \"return r46\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"cleanDuplicateSlashes\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanDuplicateSlashes(java.lang.String)>\",\"cleanLeadingSlash\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanLeadingSlash(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r17 = new java.lang.StringBuilder\", \"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"cleanDuplicateSlashes\":null,\"cleanLeadingSlash\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.cleanDuplicateSlashes(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r31 = (java.lang.String) $r4\", \"if r31 != null goto r32 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r31)\", \"$r23 = new java.lang.IllegalStateException\", \"$r24 = new java.lang.StringBuilder\", \"specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r26 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29)\", \"throw $r23\", \"r32 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r31)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r32)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r32)\", \"if $z2 == 0 goto $z3 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r15 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r32, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>($r15)\", \"if $z5 == 0 goto (branch)\", \"$r16 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z6 == 0 goto return null\", \"$r18 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\"],\"getResource.43\":[\"specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r22)\"],\"getResource.50\":[\"goto [?= $r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r30 := @caughtexception\", \"$r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r34 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r33.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r34)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r37 = interfaceinvoke $r33.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r32, $r36)\", \"if r37 == null goto return r37\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r37\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r33, $r14)\", \"r38 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r37)\", \"return r38\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\"],\"getResource.43\":[\"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.cleanDuplicateSlashes(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r37 = (java.lang.String) $r4\", \"if r37 != null goto r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$r29 = new java.lang.IllegalStateException\", \"$r30 = new java.lang.StringBuilder\", \"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r32 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35)\", \"throw $r29\", \"r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r38)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r38)\", \"if $z2 == 0 goto $z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"r39 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r38, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r39)\", \"if $z5 == 0 goto r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z8 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z8 == 0 goto return null\", \"$r24 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r23 = new java.lang.StringBuilder\", \"specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r24.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r28)\"],\"getResource.50\":[\"r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$z6 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r40)\", \"if $z6 == 0 goto (branch)\", \"$r15 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return null\", \"$r17 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21)\", \"return null\", \"goto [?= $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r36 := @caughtexception\", \"$r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r42 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r41.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r42)\", \"$r44 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r45 = interfaceinvoke $r41.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r38, $r44)\", \"if r45 == null goto return r45\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r45\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r41, $r14)\", \"r46 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r45)\", \"return r46\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"cleanDuplicateSlashes\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanDuplicateSlashes(java.lang.String)>\",\"cleanLeadingSlash\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanLeadingSlash(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r17 = new java.lang.StringBuilder\", \"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"cleanDuplicateSlashes\":null,\"cleanLeadingSlash\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.cleanLeadingSlash(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r31 = (java.lang.String) $r4\", \"if r31 != null goto r32 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r31)\", \"$r23 = new java.lang.IllegalStateException\", \"$r24 = new java.lang.StringBuilder\", \"specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r26 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29)\", \"throw $r23\", \"r32 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r31)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r32)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r32)\", \"if $z2 == 0 goto $z3 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r15 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r32, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>($r15)\", \"if $z5 == 0 goto (branch)\", \"$r16 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z6 == 0 goto return null\", \"$r18 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\"],\"getResource.43\":[\"specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r22)\"],\"getResource.50\":[\"goto [?= $r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r30 := @caughtexception\", \"$r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r34 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r33.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r34)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r37 = interfaceinvoke $r33.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r32, $r36)\", \"if r37 == null goto return r37\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r37\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r33, $r14)\", \"r38 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r37)\", \"return r38\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\"],\"getResource.43\":[\"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.cleanLeadingSlash(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "91b803a2310344d925e5d4b1709bbcea9037554",
            "ref_file": "/data4/test_compare_script/91b803a2310344d925e5d4b1709bbcea9037554/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r37 = (java.lang.String) $r4\", \"if r37 != null goto r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$r29 = new java.lang.IllegalStateException\", \"$r30 = new java.lang.StringBuilder\", \"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r32 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35)\", \"throw $r29\", \"r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r38)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r38)\", \"if $z2 == 0 goto $z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"r39 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r38, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r39)\", \"if $z5 == 0 goto r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z8 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z8 == 0 goto return null\", \"$r24 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r23 = new java.lang.StringBuilder\", \"specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r24.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r28)\"],\"getResource.50\":[\"r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$z6 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r40)\", \"if $z6 == 0 goto (branch)\", \"$r15 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return null\", \"$r17 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21)\", \"return null\", \"goto [?= $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r36 := @caughtexception\", \"$r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r42 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r41.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r42)\", \"$r44 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r45 = interfaceinvoke $r41.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r38, $r44)\", \"if r45 == null goto return r45\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r45\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r41, $r14)\", \"r46 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r45)\", \"return r46\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"cleanDuplicateSlashes\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanDuplicateSlashes(java.lang.String)>\",\"cleanLeadingSlash\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanLeadingSlash(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r17 = new java.lang.StringBuilder\", \"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"cleanDuplicateSlashes\":null,\"cleanLeadingSlash\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.cleanLeadingSlash(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r37 = (java.lang.String) $r4\", \"if r37 != null goto r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$r29 = new java.lang.IllegalStateException\", \"$r30 = new java.lang.StringBuilder\", \"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r32 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35)\", \"throw $r29\", \"r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r38)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r38)\", \"if $z2 == 0 goto $z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"r39 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r38, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r39)\", \"if $z5 == 0 goto r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z8 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z8 == 0 goto return null\", \"$r24 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r23 = new java.lang.StringBuilder\", \"specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r24.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r28)\"],\"getResource.50\":[\"r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$z6 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r40)\", \"if $z6 == 0 goto (branch)\", \"$r15 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return null\", \"$r17 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21)\", \"return null\", \"goto [?= $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r36 := @caughtexception\", \"$r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r42 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r41.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r42)\", \"$r44 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r45 = interfaceinvoke $r41.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r38, $r44)\", \"if r45 == null goto return r45\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r45\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r41, $r14)\", \"r46 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r45)\", \"return r46\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"cleanDuplicateSlashes\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanDuplicateSlashes(java.lang.String)>\",\"cleanLeadingSlash\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanLeadingSlash(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r17 = new java.lang.StringBuilder\", \"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"cleanDuplicateSlashes\":null,\"cleanLeadingSlash\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.getResource(HttpServletRequest)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r31 = (java.lang.String) $r4\", \"if r31 != null goto r32 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r31)\", \"$r23 = new java.lang.IllegalStateException\", \"$r24 = new java.lang.StringBuilder\", \"specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r26 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29)\", \"throw $r23\", \"r32 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r31)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r32)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r32)\", \"if $z2 == 0 goto $z3 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"33\":[\"$z3 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r15 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r32, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>($r15)\", \"if $z5 == 0 goto (branch)\", \"$r16 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z6 == 0 goto return null\", \"$r18 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\"],\"43\":[\"specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r22)\"],\"50\":[\"goto [?= $r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r30 := @caughtexception\", \"$r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r34 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r33.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r34)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r37 = interfaceinvoke $r33.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r32, $r36)\", \"if r37 == null goto return r37\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r37\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r33, $r14)\", \"r38 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r37)\", \"return r38\"]},\"rhs\" : {\"2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\"],\"43\":[\"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"50\":null}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.getResource(HttpServletRequest)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "91b803a2310344d925e5d4b1709bbcea9037554",
            "ref_file": "/data4/test_compare_script/91b803a2310344d925e5d4b1709bbcea9037554/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r37 = (java.lang.String) $r4\", \"if r37 != null goto r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$r29 = new java.lang.IllegalStateException\", \"$r30 = new java.lang.StringBuilder\", \"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r32 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35)\", \"throw $r29\", \"r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r38)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r38)\", \"if $z2 == 0 goto $z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"33\":[\"$z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"r39 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r38, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r39)\", \"if $z5 == 0 goto r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z8 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z8 == 0 goto return null\", \"$r24 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r23 = new java.lang.StringBuilder\", \"specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r24.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r28)\"],\"50\":[\"r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$z6 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r40)\", \"if $z6 == 0 goto (branch)\", \"$r15 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return null\", \"$r17 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21)\", \"return null\", \"goto [?= $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r36 := @caughtexception\", \"$r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r42 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r41.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r42)\", \"$r44 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r45 = interfaceinvoke $r41.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r38, $r44)\", \"if r45 == null goto return r45\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r45\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r41, $r14)\", \"r46 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r45)\", \"return r46\"]},\"rhs\" : {\"2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r17 = new java.lang.StringBuilder\", \"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"50\":null}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.getResource(HttpServletRequest)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r37 = (java.lang.String) $r4\", \"if r37 != null goto r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$r29 = new java.lang.IllegalStateException\", \"$r30 = new java.lang.StringBuilder\", \"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r32 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35)\", \"throw $r29\", \"r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r38)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r38)\", \"if $z2 == 0 goto $z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"33\":[\"$z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"r39 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r38, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r39)\", \"if $z5 == 0 goto r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z8 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z8 == 0 goto return null\", \"$r24 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r23 = new java.lang.StringBuilder\", \"specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r24.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r28)\"],\"50\":[\"r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$z6 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r40)\", \"if $z6 == 0 goto (branch)\", \"$r15 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return null\", \"$r17 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21)\", \"return null\", \"goto [?= $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r36 := @caughtexception\", \"$r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r42 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r41.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r42)\", \"$r44 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r45 = interfaceinvoke $r41.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r38, $r44)\", \"if r45 == null goto return r45\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r45\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r41, $r14)\", \"r46 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r45)\", \"return r46\"]},\"rhs\" : {\"2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r17 = new java.lang.StringBuilder\", \"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"50\":null}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidEncodedPath(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "91b803a2310344d925e5d4b1709bbcea9037554",
            "ref_file": "/data4/test_compare_script/91b803a2310344d925e5d4b1709bbcea9037554/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r37 = (java.lang.String) $r4\", \"if r37 != null goto r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$r29 = new java.lang.IllegalStateException\", \"$r30 = new java.lang.StringBuilder\", \"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r32 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35)\", \"throw $r29\", \"r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r38)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r38)\", \"if $z2 == 0 goto $z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"r39 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r38, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r39)\", \"if $z5 == 0 goto r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z8 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z8 == 0 goto return null\", \"$r24 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r23 = new java.lang.StringBuilder\", \"specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r24.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r28)\"],\"getResource.50\":[\"r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$z6 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r40)\", \"if $z6 == 0 goto (branch)\", \"$r15 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return null\", \"$r17 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21)\", \"return null\", \"goto [?= $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r36 := @caughtexception\", \"$r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r42 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r41.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r42)\", \"$r44 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r45 = interfaceinvoke $r41.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r38, $r44)\", \"if r45 == null goto return r45\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r45\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r41, $r14)\", \"r46 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r45)\", \"return r46\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"cleanDuplicateSlashes\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanDuplicateSlashes(java.lang.String)>\",\"cleanLeadingSlash\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanLeadingSlash(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r17 = new java.lang.StringBuilder\", \"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"cleanDuplicateSlashes\":null,\"cleanLeadingSlash\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidEncodedPath(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r37 = (java.lang.String) $r4\", \"if r37 != null goto r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$r29 = new java.lang.IllegalStateException\", \"$r30 = new java.lang.StringBuilder\", \"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r32 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35)\", \"throw $r29\", \"r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r38)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r38)\", \"if $z2 == 0 goto $z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"r39 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r38, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r39)\", \"if $z5 == 0 goto r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z8 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z8 == 0 goto return null\", \"$r24 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r23 = new java.lang.StringBuilder\", \"specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r24.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r28)\"],\"getResource.50\":[\"r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$z6 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r40)\", \"if $z6 == 0 goto (branch)\", \"$r15 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return null\", \"$r17 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21)\", \"return null\", \"goto [?= $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r36 := @caughtexception\", \"$r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r42 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r41.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r42)\", \"$r44 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r45 = interfaceinvoke $r41.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r38, $r44)\", \"if r45 == null goto return r45\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r45\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r41, $r14)\", \"r46 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r45)\", \"return r46\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"cleanDuplicateSlashes\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanDuplicateSlashes(java.lang.String)>\",\"cleanLeadingSlash\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanLeadingSlash(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r17 = new java.lang.StringBuilder\", \"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"cleanDuplicateSlashes\":null,\"cleanLeadingSlash\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidPath(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "91b803a2310344d925e5d4b1709bbcea9037554",
            "ref_file": "/data4/test_compare_script/91b803a2310344d925e5d4b1709bbcea9037554/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"51\":null},\"rhs\" : {\"1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"51\":[\"return 1\"]}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidPath(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"51\":null},\"rhs\" : {\"1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"51\":[\"return 1\"]}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.processPath(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r31 = (java.lang.String) $r4\", \"if r31 != null goto r32 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r31)\", \"$r23 = new java.lang.IllegalStateException\", \"$r24 = new java.lang.StringBuilder\", \"specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r26 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29)\", \"throw $r23\", \"r32 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r31)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r32)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r32)\", \"if $z2 == 0 goto $z3 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r15 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r32, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>($r15)\", \"if $z5 == 0 goto (branch)\", \"$r16 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z6 == 0 goto return null\", \"$r18 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\"],\"getResource.43\":[\"specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r22)\"],\"getResource.50\":[\"goto [?= $r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r30 := @caughtexception\", \"$r33 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r34 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r33.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r34)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r37 = interfaceinvoke $r33.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r32, $r36)\", \"if r37 == null goto return r37\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r37\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r33, $r14)\", \"r38 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r37)\", \"return r38\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\"],\"getResource.43\":[\"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.processPath(String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.class",
            "diff": "{\"lhs\" : {\"interfaces\":[\"HttpRequestHandler\", \"EmbeddedValueResolverAware\", \"InitializingBean\", \"CorsConfigurationSource\"],\"logger\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\",\"URL_RESOURCE_CHARSET_PREFIX\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String URL_RESOURCE_CHARSET_PREFIX>\",\"locationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues>\",\"locationCharsets\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets>\",\"resourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers>\",\"resourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers>\",\"resourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\",\"resourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\",\"contentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager>\",\"contentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy contentNegotiationStrategy>\",\"corsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration corsConfiguration>\",\"urlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper urlPathHelper>\",\"embeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.util.StringValueResolver embeddedValueResolver>\",\"jafPresent\":null,\"<init>.2\":[\"$r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>\", \"$r3 = virtualinvoke $r2.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[0] = $r3\", \"$r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>\", \"$r5 = virtualinvoke $r4.<org.springframework.http.HttpMethod: java.lang.String name()>()\", \"$r1[1] = $r5\"],\"<init>.9\":[\"$r6 = new java.util.ArrayList\", \"specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locationValues> = $r6\", \"$r7 = new java.util.ArrayList\", \"specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = $r7\", \"$r8 = new java.util.HashMap\", \"specialinvoke $r8.<java.util.HashMap: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.Map locationCharsets> = $r8\", \"$r9 = new java.util.ArrayList\", \"specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceResolvers> = $r9\", \"$r10 = new java.util.ArrayList\", \"specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(4)\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List resourceTransformers> = $r10\"],\"setLocationValues\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setLocationValues(java.util.List)>\",\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, \"Locations list must not be null\")\", \"$r2 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r2.<java.util.List: void clear()>()\", \"$r3 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1)\"],\"getLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>\",\"setResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceResolvers(java.util.List)>\",\"getResourceResolvers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>\",\"setResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceTransformers(java.util.List)>\",\"getResourceTransformers\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>\",\"setResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceHttpMessageConverter(org.springframework.http.converter.ResourceHttpMessageConverter)>\",\"getResourceHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter getResourceHttpMessageConverter()>\",\"setResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setResourceRegionHttpMessageConverter(org.springframework.http.converter.ResourceRegionHttpMessageConverter)>\",\"getResourceRegionHttpMessageConverter\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter()>\",\"setContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>\",\"getContentNegotiationManager\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager()>\",\"setCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setCorsConfiguration(org.springframework.web.cors.CorsConfiguration)>\",\"getCorsConfiguration\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)>\",\"setUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>\",\"getUrlPathHelper\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.util.UrlPathHelper getUrlPathHelper()>\",\"setEmbeddedValueResolver\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>\",\"afterPropertiesSet\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void afterPropertiesSet()>\",\"resolveResourceLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void resolveResourceLocations()>\",\"initAllowedLocations\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void initAllowedLocations()>\",\"initContentNegotiationStrategy\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.web.accept.PathExtensionContentNegotiationStrategy initContentNegotiationStrategy()>\",\"handleRequest.3\":null,\"handleRequest.4\":[\"if r3 != null goto $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r37 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r37.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"$r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>\", \"$r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z0 = virtualinvoke $r7.<org.springframework.http.HttpMethod: boolean matches(java.lang.String)>($r8)\", \"if $z0 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r36 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String getAllowHeader()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Allow\", $r36)\", \"return\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkRequest(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r9 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z1 = virtualinvoke $r9.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r35 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r35.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void prepareResponse(javax.servlet.http.HttpServletResponse)>(r2)\", \"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r3)\", \"if r4 == null goto $r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z3 == 0 goto $r43 = \"HEAD\"\", \"$r29 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r28 = new java.lang.StringBuilder\", \"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()\", \"$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Determined media type \\'\")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r29.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r34)\", \"goto [?= $r43 = \"HEAD\"]\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto $r43 = \"HEAD\"\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"No media type found for \")\", \"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26)\", \"$r43 = \"HEAD\"\", \"$r44 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z4 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44)\", \"if $z4 == 0 goto $r11 = new org.springframework.http.server.ServletServerHttpResponse\"],\"handleRequest.57\":[\"$r20 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"$r11 = new org.springframework.http.server.ServletServerHttpResponse\", \"specialinvoke $r11.<org.springframework.http.server.ServletServerHttpResponse: void <init>(javax.servlet.http.HttpServletResponse)>(r2)\", \"$r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(\"Range\")\", \"if $r12 != null goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"if $r18 == null goto $z5 = 0\", \"$z5 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")]\", \"$z5 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z5, \"Not initialized\")\", \"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r19 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceHttpMessageConverter resourceHttpMessageConverter>\", \"virtualinvoke $r19.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r3, r4, $r11)\", \"goto [?= return]\", \"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"if $r13 == null goto $z6 = 0\", \"$z6 = 1\", \"goto [?= staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")]\", \"$z6 = 0\", \"staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z6, \"Not initialized\")\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r14 = new org.springframework.http.server.ServletServerHttpRequest\", \"specialinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1)\", \"$r15 = virtualinvoke $r14.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders getHeaders()>()\", \"r45 = virtualinvoke $r15.<org.springframework.http.HttpHeaders: java.util.List getRange()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(206)\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.converter.ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter>\", \"$r17 = staticinvoke <org.springframework.http.HttpRange: java.util.List toResourceRegions(java.util.List,org.springframework.core.io.Resource)>(r45, r3)\", \"virtualinvoke $r16.<org.springframework.http.converter.ResourceRegionHttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r17, r4, $r11)\", \"goto [?= return]\", \"$r38 := @caughtexception\", \"$r39 = new java.lang.StringBuilder\", \"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()\", \"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"bytes */\")\", \"$l1 = interfaceinvoke r3.<org.springframework.core.io.Resource: long contentLength()>()\", \"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)\", \"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Content-Range\", $r42)\", \"interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(416)\"],\"getResource.2\":[\"$r3 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r3)\", \"r37 = (java.lang.String) $r4\", \"if r37 != null goto r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$r29 = new java.lang.IllegalStateException\", \"$r30 = new java.lang.StringBuilder\", \"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Required request attribute \\'\")\", \"$r32 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)\", \"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35)\", \"throw $r29\", \"r38 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r37)\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r38)\", \"if $z0 == 0 goto $r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r38)\", \"if $z2 == 0 goto $z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\"],\"getResource.24\":[\"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()\", \"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11)\"],\"getResource.33\":[\"$z3 = virtualinvoke r38.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"%\")\", \"if $z3 == 0 goto $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"r39 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r38, \"UTF-8\")\", \"$z5 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r39)\", \"if $z5 == 0 goto r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$r22 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z8 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z8 == 0 goto return null\", \"$r24 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r23 = new java.lang.StringBuilder\", \"specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()\", \"$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r24.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r28)\"],\"getResource.50\":[\"r40 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>(r39)\", \"$z6 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r40)\", \"if $z6 == 0 goto (branch)\", \"$r15 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return null\", \"$r17 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Ignoring invalid resource path with escape sequences [\")\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"].\")\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21)\", \"return null\", \"goto [?= $r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain]\", \"$r36 := @caughtexception\", \"$r41 = new org.springframework.web.servlet.resource.DefaultResourceResolverChain\", \"$r42 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceResolvers()>()\", \"specialinvoke $r41.<org.springframework.web.servlet.resource.DefaultResourceResolverChain: void <init>(java.util.List)>($r42)\", \"$r44 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getLocations()>()\", \"r45 = interfaceinvoke $r41.<org.springframework.web.servlet.resource.ResourceResolverChain: org.springframework.core.io.Resource resolveResource(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.List)>(r1, r38, $r44)\", \"if r45 == null goto return r45\", \"$r12 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"$z4 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>()\", \"if $z4 == 0 goto $r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"return r45\", \"$r13 = new org.springframework.web.servlet.resource.DefaultResourceTransformerChain\", \"$r14 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List getResourceTransformers()>()\", \"specialinvoke $r13.<org.springframework.web.servlet.resource.DefaultResourceTransformerChain: void <init>(org.springframework.web.servlet.resource.ResourceResolverChain,java.util.List)>($r41, $r14)\", \"r46 = interfaceinvoke $r13.<org.springframework.web.servlet.resource.ResourceTransformerChain: org.springframework.core.io.Resource transform(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>(r1, r45)\", \"return r46\"],\"processPath\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String processPath(java.lang.String)>\",\"cleanDuplicateSlashes\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanDuplicateSlashes(java.lang.String)>\",\"cleanLeadingSlash\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String cleanLeadingSlash(java.lang.String)>\",\"isInvalidPath.1\":[\"r14 := @parameter0: java.lang.String\", \"$r2 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z0 == 0 goto $z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"$r10 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r9 = new java.lang.StringBuilder\", \"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()\", \"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying \\\"invalid path\\\" checks to path: \")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13)\", \"$z1 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z1 != 0 goto $r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z3 == 0 goto $z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"$r3 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z2 == 0 goto return 1\", \"$r4 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\")\", \"return 1\", \"$z4 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\":/\")\", \"if $z4 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$c0 = virtualinvoke r14.<java.lang.String: char charAt(int)>(0)\", \"if $c0 != 47 goto $r15 = r14\", \"$r15 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1)\", \"goto [?= $z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)]\", \"$r15 = r14\", \"$z8 = staticinvoke <org.springframework.util.ResourceUtils: boolean isUrl(java.lang.String)>($r15)\", \"if $z8 != 0 goto $r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z10 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>(\"url:\")\", \"if $z10 == 0 goto $z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"$r7 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z9 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z9 == 0 goto return 1\", \"$r8 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path represents URL or has \\\"url:\\\" prefix.\")\", \"return 1\", \"$z5 = virtualinvoke r14.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"..\")\", \"if $z5 == 0 goto return 0\", \"r16 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r14)\", \"$z6 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"../\")\", \"if $z6 == 0 goto return 0\", \"$r5 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z7 == 0 goto return 1\", \"$r6 = <org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\")\", \"return 1\"],\"isInvalidPath.51\":null,\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(javax.servlet.http.HttpServletRequest,org.springframework.core.io.Resource)>\",\"setHeaders.7\":[\"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLengthLong(long)>(l0)\", \"goto [?= (branch)]\"],\"setHeaders.11\":[\"if r3 == null goto $z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"$r17 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r17)\", \"$z0 = r2 instanceof org.springframework.web.servlet.resource.HttpResource\", \"if $z0 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r10 = (org.springframework.web.servlet.resource.HttpResource) r2\", \"r4 = interfaceinvoke $r10.<org.springframework.web.servlet.resource.HttpResource: org.springframework.http.HttpHeaders getResponseHeaders()>()\", \"$r11 = virtualinvoke r4.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>()\", \"r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()\", \"$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()\", \"if $z1 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\", \"$r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()\", \"r6 = (java.util.Map$Entry) $r12\", \"$r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()\", \"r7 = (java.lang.String) $r13\", \"z3 = 1\", \"$r14 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()\", \"$r15 = (java.util.List) $r14\", \"r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()\", \"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()\", \"if $z2 == 0 goto (branch)\", \"$r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()\", \"r9 = (java.lang.String) $r16\", \"if z3 == 0 goto interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"goto [?= z3 = 0]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r9)\", \"z3 = 0\", \"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]\", \"goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>(\"Accept-Ranges\", \"bytes\")\"],\"toString\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.lang.String toString()>\",\"<clinit>.0\":[\"$r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\")\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger> = $r0\"],\"getMediaType\":null,\"writeContent\":null},\"rhs\" : {\"interfaces\":[\"HttpRequestHandler\"],\"logger\":null,\"URL_RESOURCE_CHARSET_PREFIX\":null,\"locationValues\":null,\"locationCharsets\":null,\"resourceResolvers\":null,\"resourceTransformers\":null,\"resourceHttpMessageConverter\":null,\"resourceRegionHttpMessageConverter\":null,\"contentNegotiationManager\":null,\"contentNegotiationStrategy\":null,\"corsConfiguration\":null,\"urlPathHelper\":null,\"embeddedValueResolver\":null,\"jafPresent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent>\",\"<init>.2\":[\"$r1[0] = \"GET\"\", \"$r1[1] = \"HEAD\"\"],\"<init>.9\":null,\"setLocationValues\":null,\"setLocations.2\":[\"staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r1, \"Locations list must not be empty\")\", \"r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations> = r1\"],\"getLocations\":null,\"setResourceResolvers\":null,\"getResourceResolvers\":null,\"setResourceTransformers\":null,\"getResourceTransformers\":null,\"setResourceHttpMessageConverter\":null,\"getResourceHttpMessageConverter\":null,\"setResourceRegionHttpMessageConverter\":null,\"getResourceRegionHttpMessageConverter\":null,\"setContentNegotiationManager\":null,\"getContentNegotiationManager\":null,\"setCorsConfiguration\":null,\"getCorsConfiguration\":null,\"setUrlPathHelper\":null,\"getUrlPathHelper\":null,\"setEmbeddedValueResolver\":null,\"afterPropertiesSet\":null,\"resolveResourceLocations\":null,\"initAllowedLocations\":null,\"initContentNegotiationStrategy\":null,\"handleRequest.3\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void checkAndPrepare(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean)>(r1, r2, 1)\"],\"handleRequest.4\":[\"if r3 != null goto r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"$r22 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"No matching resource found - returning 404\")\"],\"handleRequest.9\":[\"r4 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r3)\", \"if r4 == null goto $r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z2 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r17 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r16 = new java.lang.StringBuilder\", \"specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Determined media type \\'\")\", \"$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)\", \"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' for \")\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21)\", \"goto [?= $r23 = new org.springframework.web.context.request.ServletWebRequest]\", \"$r5 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z0 == 0 goto $r23 = new org.springframework.web.context.request.ServletWebRequest\", \"$r11 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r10 = new java.lang.StringBuilder\", \"specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"No media type found for \")\", \"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" - not sending a content-type header\")\", \"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14)\", \"$r23 = new org.springframework.web.context.request.ServletWebRequest\", \"specialinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2)\"],\"handleRequest.20\":[\"$z3 = virtualinvoke $r23.<org.springframework.web.context.request.ServletWebRequest: boolean checkNotModified(long)>($l0)\", \"if $z3 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void setHeaders(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r2, r3, r4)\", \"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(\"Resource not modified - returning 304\")\"],\"handleRequest.25\":null,\"handleRequest.57\":[\"$r6 = \"HEAD\"\", \"$r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()\", \"$z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)\", \"if $z1 == 0 goto virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\", \"$r8 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(\"HEAD request - skipping content\")\"],\"handleRequest.60\":[\"virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>(r2, r3)\"],\"getResource.2\":[\"$r5 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>($r5)\", \"r2 = (java.lang.String) $r6\", \"if r2 != null goto $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"$r33 = new java.lang.IllegalStateException\", \"$r34 = new java.lang.StringBuilder\", \"specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Required request attribute \\'\")\", \"$r35 = <org.springframework.web.servlet.HandlerMapping: java.lang.String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE>\", \"$r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)\", \"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\' is not set\")\", \"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38)\", \"throw $r33\", \"$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r2)\", \"if $z0 == 0 goto $r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z2 = virtualinvoke r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean isInvalidPath(java.lang.String)>(r2)\", \"if $z2 == 0 goto $r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"$r7 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\"],\"getResource.24\":[\"$r9 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r8 = new java.lang.StringBuilder\", \"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Ignoring invalid resource path [\")\", \"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")\", \"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)\"],\"getResource.33\":[\"$r13 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: java.util.List locations>\", \"r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\", \"r3 = (org.springframework.core.io.Resource) $r14\", \"$r15 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z3 == 0 goto r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$r28 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r27 = new java.lang.StringBuilder\", \"specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Trying relative path [\")\", \"$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)\", \"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] against base location: \")\", \"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)\", \"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32)\", \"r41 = interfaceinvoke r3.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>(r2)\", \"$z4 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean exists()>()\", \"if $z4 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z6 = interfaceinvoke r41.<org.springframework.core.io.Resource: boolean isReadable()>()\", \"if $z6 == 0 goto $r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r21 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()\", \"if $z7 == 0 goto return r41\", \"$r23 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r22 = new java.lang.StringBuilder\", \"specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Found matching resource: \")\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25)\", \"return r41\", \"$r16 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$z5 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>()\", \"if $z5 == 0 goto $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"$r18 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"$r17 = new java.lang.StringBuilder\", \"specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Relative resource doesn\\'t exist or isn\\'t readable: \")\", \"$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41)\", \"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()\", \"interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r20)\", \"goto [?= $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]\", \"$r39 := @caughtexception\", \"$r40 = r0.<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.apache.commons.logging.Log logger>\", \"interfaceinvoke $r40.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(\"Failed to create relative resource - trying next resource location\", $r39)\", \"$z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()\", \"if $z8 != 0 goto $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()\"],\"getResource.50\":null,\"processPath\":null,\"cleanDuplicateSlashes\":null,\"cleanLeadingSlash\":null,\"isInvalidPath.1\":[\"r1 := @parameter0: java.lang.String\", \"$z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"WEB-INF\")\", \"if $z0 != 0 goto return 1\", \"$z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"META-INF\")\", \"if $z1 != 0 goto return 1\", \"$r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1)\", \"$z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"..\")\", \"if $z2 != 0 goto return 1\"],\"isInvalidPath.51\":[\"return 1\"],\"getMediaType\":null,\"setHeaders.7\":[\"$r5 = new java.io.IOException\", \"$r6 = new java.lang.StringBuilder\", \"specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Resource content too long (beyond Integer.MAX_VALUE): \")\", \"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)\", \"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8)\", \"throw $r5\"],\"setHeaders.11\":[\"if r3 == null goto return\", \"$r4 = virtualinvoke r3.<org.springframework.http.MediaType: java.lang.String toString()>()\", \"interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r4)\"],\"toString\":null,\"<clinit>.0\":[\"$r0 = class \"Lorg/springframework/web/servlet/resource/ResourceHttpRequestHandler;\"\", \"$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()\", \"$z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(\"javax.activation.FileTypeMap\", $r1)\", \"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: boolean jafPresent> = $z0\"],\"getMediaType\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>\",\"writeContent\":\"<org.springframework.web.servlet.resource.ResourceHttpRequestHandler: void writeContent(javax.servlet.http.HttpServletResponse,org.springframework.core.io.Resource)>\"}}",
            "contained": true
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.initAllowedLocations()",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.invalidPath()",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.invalidPath()",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.processPath()",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.resolvePathWithTraversal()",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.resolvePathWithTraversal()",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testInvalidPath()",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testInvalidPath()",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testInvalidPath(HttpMethod)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testInvalidPath(HttpMethod)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testInvalidPath(Resource,String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testInvalidPath(Resource,String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testInvalidPath(String,ResourceHttpRequestHandler)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testInvalidPath(String,ResourceHttpRequestHandler)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testResolvePathWithTraversal(HttpMethod)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testResolvePathWithTraversal(HttpMethod)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testResolvePathWithTraversal(Resource,String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "0e28bee0f155b9bf240b4bafc4646e4810cb23f",
            "ref_file": "/data4/test_compare_script/0e28bee0f155b9bf240b4bafc4646e4810cb23f/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        },
        {
            "qname": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests.testResolvePathWithTraversal(Resource,String)",
            "affectedFile": "/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "commit": "b9ebdaaf3710db473a2e1fec8641c316483a22a",
            "ref_file": "/data4/test_compare_script/b9ebdaaf3710db473a2e1fec8641c316483a22a/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.class",
            "diff": null,
            "contained": false
        }
    ],
    "comment": "{\"artifacts\": [\"spring-webmvc\", \"spring-webflux\"], \"references\": [\"https://github.com/spring-projects/spring-framework/commit/91b803a2310344d925e5d4b1709bbcea9037554\", \"0e28bee0f155b9bf240b4bafc4646e4810cb23f\"]}",
    "gav": {
        "groupId": "org.springframework",
        "version": "3.1.1.RELEASE",
        "artifactId": "spring-webmvc"
    },
    "timestamp": "2018-11-30",
    "vulnerable": false,
    "cve": "CVE-2018-1271"
}