{
    "gav": {
        "groupId": "bouncycastle",
        "version": "138",
        "artifactId": "bcprov-jdk14"
    },
    "vulnerable": false,
    "cve": "CVE-2016-1000345",
    "details": [
        {
            "qname": "org.bouncycastle.crypto.engines.IESEngine",
            "diff": "{\"lhs\" : {\"V\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] V>\",\"keyPairGenerator\":\"<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator keyPairGenerator>\",\"keyParser\":\"<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.KeyParser keyParser>\",\"IV\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] IV>\",\"init.8\":[\"$r4 = newarray (byte)[0]\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] V> = $r4\", \"specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: void extractParams(org.bouncycastle.crypto.CipherParameters)>(r3)\"],\"init\":\"<org.bouncycastle.crypto.engines.IESEngine: void init(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator)>\",\"init\":\"<org.bouncycastle.crypto.engines.IESEngine: void init(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.KeyParser)>\",\"extractParams\":\"<org.bouncycastle.crypto.engines.IESEngine: void extractParams(org.bouncycastle.crypto.CipherParameters)>\",\"getCipher\":\"<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher getCipher()>\",\"getMac\":\"<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac getMac()>\",\"encryptBlock\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] encryptBlock(byte[],int,int)>\",\"decryptBlock\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int)>\",\"processBlock.4\":null,\"processBlock.5\":[\"if $z0 == 0 goto $r4 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.KeyParser keyParser>\", \"$r14 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator keyPairGenerator>\", \"if $r14 == null goto $r30 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r15 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator keyPairGenerator>\", \"r27 = virtualinvoke $r15.<org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator: org.bouncycastle.crypto.EphemeralKeyPair generate()>()\", \"$r16 = virtualinvoke r27.<org.bouncycastle.crypto.EphemeralKeyPair: org.bouncycastle.crypto.AsymmetricCipherKeyPair getKeyPair()>()\", \"$r17 = virtualinvoke $r16.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: org.bouncycastle.crypto.params.AsymmetricKeyParameter getPrivate()>()\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters privParam> = $r17\", \"$r18 = virtualinvoke r27.<org.bouncycastle.crypto.EphemeralKeyPair: byte[] getEncodedPublicKey()>()\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] V> = $r18\", \"goto [?= $r30 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>]\", \"$r4 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.KeyParser keyParser>\", \"if $r4 == null goto $r30 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r10 = new java.io.ByteArrayInputStream\", \"specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r1, i0, i1)\", \"$r11 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.KeyParser keyParser>\", \"$r12 = interfaceinvoke $r11.<org.bouncycastle.crypto.KeyParser: org.bouncycastle.crypto.params.AsymmetricKeyParameter readKey(java.io.InputStream)>($r10)\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters pubParam> = $r12\", \"goto [?= $i2 = virtualinvoke $r10.<java.io.ByteArrayInputStream: int available()>()]\", \"$r19 := @caughtexception\", \"$r20 = new org.bouncycastle.crypto.InvalidCipherTextException\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"unable to recover ephemeral public key: \")\", \"$r23 = virtualinvoke $r19.<java.io.IOException: java.lang.String getMessage()>()\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r20.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r19)\", \"throw $r20\", \"$i2 = virtualinvoke $r10.<java.io.ByteArrayInputStream: int available()>()\", \"i4 = i1 - $i2\", \"$i3 = i0 + i4\", \"$r13 = staticinvoke <org.bouncycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r1, i0, $i3)\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] V> = $r13\", \"$r30 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r31 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters privParam>\", \"interfaceinvoke $r30.<org.bouncycastle.crypto.BasicAgreement: void init(org.bouncycastle.crypto.CipherParameters)>($r31)\", \"$r32 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r33 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters pubParam>\", \"r34 = interfaceinvoke $r32.<org.bouncycastle.crypto.BasicAgreement: java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters)>($r33)\", \"$r35 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$i5 = interfaceinvoke $r35.<org.bouncycastle.crypto.BasicAgreement: int getFieldSize()>()\", \"r36 = staticinvoke <org.bouncycastle.util.BigIntegers: byte[] asUnsignedByteArray(int,java.math.BigInteger)>($i5, r34)\", \"$r37 = r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] V>\", \"$i6 = lengthof $r37\", \"if $i6 == 0 goto $r5 = new org.bouncycastle.crypto.params.KDFParameters\", \"$r9 = r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] V>\", \"r38 = staticinvoke <org.bouncycastle.util.Arrays: byte[] concatenate(byte[],byte[])>($r9, r36)\", \"staticinvoke <org.bouncycastle.util.Arrays: void fill(byte[],byte)>(r36, 0)\", \"r36 = r38\", \"$r5 = new org.bouncycastle.crypto.params.KDFParameters\", \"$r6 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>\", \"$r7 = virtualinvoke $r6.<org.bouncycastle.crypto.params.IESParameters: byte[] getDerivationV()>()\", \"specialinvoke $r5.<org.bouncycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>(r36, $r7)\", \"$r8 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf>\", \"interfaceinvoke $r8.<org.bouncycastle.crypto.DerivationFunction: void init(org.bouncycastle.crypto.DerivationParameters)>($r5)\", \"$z1 = r0.<org.bouncycastle.crypto.engines.IESEngine: boolean forEncryption>\", \"if $z1 == 0 goto $r40 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int)>(r1, i0, i1)\", \"$r40 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] encryptBlock(byte[],int,int)>(r1, i0, i1)\", \"goto [?= staticinvoke <org.bouncycastle.util.Arrays: void fill(byte[],byte)>(r36, 0)]\", \"$r40 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int)>(r1, i0, i1)\", \"staticinvoke <org.bouncycastle.util.Arrays: void fill(byte[],byte)>(r36, 0)\", \"return $r40\", \"$r26 := @caughtexception\", \"staticinvoke <org.bouncycastle.util.Arrays: void fill(byte[],byte)>(r36, 0)\", \"throw $r26\"],\"getLengthTag\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] getLengthTag(byte[])>\",\"decryptBlock\":null,\"encryptBlock\":null,\"generateKdfBytes\":null},\"rhs\" : {\"V\":null,\"keyPairGenerator\":null,\"keyParser\":null,\"IV\":null,\"init.8\":[\"$r4 = (org.bouncycastle.crypto.params.IESParameters) r3\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param> = $r4\"],\"init\":null,\"init\":null,\"extractParams\":null,\"getCipher\":null,\"getMac\":null,\"encryptBlock\":null,\"decryptBlock\":null,\"processBlock.4\":[\"$r4 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r3 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters privParam>\", \"interfaceinvoke $r4.<org.bouncycastle.crypto.BasicAgreement: void init(org.bouncycastle.crypto.CipherParameters)>($r3)\", \"$r6 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r5 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters pubParam>\", \"r2 = interfaceinvoke $r6.<org.bouncycastle.crypto.BasicAgreement: java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters)>($r5)\"],\"processBlock.5\":[\"if $z0 == 0 goto $r7 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>()\", \"$r9 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>()\", \"$r10 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] encryptBlock(byte[],int,int,byte[])>(r1, i0, i1, $r9)\", \"return $r10\", \"$r7 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>()\", \"$r8 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int,byte[])>(r1, i0, i1, $r7)\", \"return $r8\"],\"getLengthTag\":null,\"decryptBlock\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int,byte[])>\",\"encryptBlock\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] encryptBlock(byte[],int,int,byte[])>\",\"generateKdfBytes\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] generateKdfBytes(org.bouncycastle.crypto.params.KDFParameters,int)>\"}}",
            "commit": "21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35",
            "ref_file": "/media/adann/9117b29d-a7c2-4f28-8956-e1540fc0a715/test_compare_script/21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35/org/bouncycastle/crypto/engines/IESEngine.class",
            "contained": true,
            "affectedFile": "/org/bouncycastle/crypto/engines/IESEngine.class"
        },
        {
            "qname": "org.bouncycastle.crypto.engines.IESEngine.decryptBlock(byte[],int,int)",
            "diff": "{\"lhs\" : {\"V\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] V>\",\"keyPairGenerator\":\"<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator keyPairGenerator>\",\"keyParser\":\"<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.KeyParser keyParser>\",\"IV\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] IV>\",\"init.8\":[\"$r4 = newarray (byte)[0]\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] V> = $r4\", \"specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: void extractParams(org.bouncycastle.crypto.CipherParameters)>(r3)\"],\"init\":\"<org.bouncycastle.crypto.engines.IESEngine: void init(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator)>\",\"init\":\"<org.bouncycastle.crypto.engines.IESEngine: void init(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.KeyParser)>\",\"extractParams\":\"<org.bouncycastle.crypto.engines.IESEngine: void extractParams(org.bouncycastle.crypto.CipherParameters)>\",\"getCipher\":\"<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher getCipher()>\",\"getMac\":\"<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac getMac()>\",\"encryptBlock\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] encryptBlock(byte[],int,int)>\",\"decryptBlock\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int)>\",\"processBlock.4\":null,\"processBlock.5\":[\"if $z0 == 0 goto $r4 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.KeyParser keyParser>\", \"$r14 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator keyPairGenerator>\", \"if $r14 == null goto $r30 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r15 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator keyPairGenerator>\", \"r27 = virtualinvoke $r15.<org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator: org.bouncycastle.crypto.EphemeralKeyPair generate()>()\", \"$r16 = virtualinvoke r27.<org.bouncycastle.crypto.EphemeralKeyPair: org.bouncycastle.crypto.AsymmetricCipherKeyPair getKeyPair()>()\", \"$r17 = virtualinvoke $r16.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: org.bouncycastle.crypto.params.AsymmetricKeyParameter getPrivate()>()\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters privParam> = $r17\", \"$r18 = virtualinvoke r27.<org.bouncycastle.crypto.EphemeralKeyPair: byte[] getEncodedPublicKey()>()\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] V> = $r18\", \"goto [?= $r30 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>]\", \"$r4 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.KeyParser keyParser>\", \"if $r4 == null goto $r30 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r10 = new java.io.ByteArrayInputStream\", \"specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r1, i0, i1)\", \"$r11 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.KeyParser keyParser>\", \"$r12 = interfaceinvoke $r11.<org.bouncycastle.crypto.KeyParser: org.bouncycastle.crypto.params.AsymmetricKeyParameter readKey(java.io.InputStream)>($r10)\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters pubParam> = $r12\", \"goto [?= $i2 = virtualinvoke $r10.<java.io.ByteArrayInputStream: int available()>()]\", \"$r19 := @caughtexception\", \"$r20 = new org.bouncycastle.crypto.InvalidCipherTextException\", \"$r21 = new java.lang.StringBuilder\", \"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()\", \"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"unable to recover ephemeral public key: \")\", \"$r23 = virtualinvoke $r19.<java.io.IOException: java.lang.String getMessage()>()\", \"$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23)\", \"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r20.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r19)\", \"throw $r20\", \"$i2 = virtualinvoke $r10.<java.io.ByteArrayInputStream: int available()>()\", \"i4 = i1 - $i2\", \"$i3 = i0 + i4\", \"$r13 = staticinvoke <org.bouncycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r1, i0, $i3)\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] V> = $r13\", \"$r30 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r31 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters privParam>\", \"interfaceinvoke $r30.<org.bouncycastle.crypto.BasicAgreement: void init(org.bouncycastle.crypto.CipherParameters)>($r31)\", \"$r32 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r33 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters pubParam>\", \"r34 = interfaceinvoke $r32.<org.bouncycastle.crypto.BasicAgreement: java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters)>($r33)\", \"$r35 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$i5 = interfaceinvoke $r35.<org.bouncycastle.crypto.BasicAgreement: int getFieldSize()>()\", \"r36 = staticinvoke <org.bouncycastle.util.BigIntegers: byte[] asUnsignedByteArray(int,java.math.BigInteger)>($i5, r34)\", \"$r37 = r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] V>\", \"$i6 = lengthof $r37\", \"if $i6 == 0 goto $r5 = new org.bouncycastle.crypto.params.KDFParameters\", \"$r9 = r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] V>\", \"r38 = staticinvoke <org.bouncycastle.util.Arrays: byte[] concatenate(byte[],byte[])>($r9, r36)\", \"staticinvoke <org.bouncycastle.util.Arrays: void fill(byte[],byte)>(r36, 0)\", \"r36 = r38\", \"$r5 = new org.bouncycastle.crypto.params.KDFParameters\", \"$r6 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>\", \"$r7 = virtualinvoke $r6.<org.bouncycastle.crypto.params.IESParameters: byte[] getDerivationV()>()\", \"specialinvoke $r5.<org.bouncycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>(r36, $r7)\", \"$r8 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf>\", \"interfaceinvoke $r8.<org.bouncycastle.crypto.DerivationFunction: void init(org.bouncycastle.crypto.DerivationParameters)>($r5)\", \"$z1 = r0.<org.bouncycastle.crypto.engines.IESEngine: boolean forEncryption>\", \"if $z1 == 0 goto $r40 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int)>(r1, i0, i1)\", \"$r40 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] encryptBlock(byte[],int,int)>(r1, i0, i1)\", \"goto [?= staticinvoke <org.bouncycastle.util.Arrays: void fill(byte[],byte)>(r36, 0)]\", \"$r40 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int)>(r1, i0, i1)\", \"staticinvoke <org.bouncycastle.util.Arrays: void fill(byte[],byte)>(r36, 0)\", \"return $r40\", \"$r26 := @caughtexception\", \"staticinvoke <org.bouncycastle.util.Arrays: void fill(byte[],byte)>(r36, 0)\", \"throw $r26\"],\"getLengthTag\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] getLengthTag(byte[])>\",\"decryptBlock\":null,\"encryptBlock\":null,\"generateKdfBytes\":null},\"rhs\" : {\"V\":null,\"keyPairGenerator\":null,\"keyParser\":null,\"IV\":null,\"init.8\":[\"$r4 = (org.bouncycastle.crypto.params.IESParameters) r3\", \"r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param> = $r4\"],\"init\":null,\"init\":null,\"extractParams\":null,\"getCipher\":null,\"getMac\":null,\"encryptBlock\":null,\"decryptBlock\":null,\"processBlock.4\":[\"$r4 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r3 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters privParam>\", \"interfaceinvoke $r4.<org.bouncycastle.crypto.BasicAgreement: void init(org.bouncycastle.crypto.CipherParameters)>($r3)\", \"$r6 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>\", \"$r5 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters pubParam>\", \"r2 = interfaceinvoke $r6.<org.bouncycastle.crypto.BasicAgreement: java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters)>($r5)\"],\"processBlock.5\":[\"if $z0 == 0 goto $r7 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>()\", \"$r9 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>()\", \"$r10 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] encryptBlock(byte[],int,int,byte[])>(r1, i0, i1, $r9)\", \"return $r10\", \"$r7 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>()\", \"$r8 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int,byte[])>(r1, i0, i1, $r7)\", \"return $r8\"],\"getLengthTag\":null,\"decryptBlock\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int,byte[])>\",\"encryptBlock\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] encryptBlock(byte[],int,int,byte[])>\",\"generateKdfBytes\":\"<org.bouncycastle.crypto.engines.IESEngine: byte[] generateKdfBytes(org.bouncycastle.crypto.params.KDFParameters,int)>\"}}",
            "commit": "21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35",
            "ref_file": "/media/adann/9117b29d-a7c2-4f28-8956-e1540fc0a715/test_compare_script/21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35/org/bouncycastle/crypto/engines/IESEngine.class",
            "contained": true,
            "affectedFile": "/org/bouncycastle/crypto/engines/IESEngine.class"
        },
        {
            "qname": "org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher",
            "diff": null,
            "commit": "21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35",
            "ref_file": "/media/adann/9117b29d-a7c2-4f28-8956-e1540fc0a715/test_compare_script/21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35/org/bouncycastle/jcajce/provider/asymmetric/dh/IESCipher.class",
            "contained": false,
            "affectedFile": "/org/bouncycastle/jcajce/provider/asymmetric/dh/IESCipher.class"
        },
        {
            "qname": "org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher.engineDoFinal(byte[],int,int)",
            "diff": null,
            "commit": "21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35",
            "ref_file": "/media/adann/9117b29d-a7c2-4f28-8956-e1540fc0a715/test_compare_script/21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35/org/bouncycastle/jcajce/provider/asymmetric/dh/IESCipher.class",
            "contained": false,
            "affectedFile": "/org/bouncycastle/jcajce/provider/asymmetric/dh/IESCipher.class"
        },
        {
            "qname": "org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher",
            "diff": null,
            "commit": "21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35",
            "ref_file": "/media/adann/9117b29d-a7c2-4f28-8956-e1540fc0a715/test_compare_script/21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35/org/bouncycastle/jcajce/provider/asymmetric/ec/IESCipher.class",
            "contained": false,
            "affectedFile": "/org/bouncycastle/jcajce/provider/asymmetric/ec/IESCipher.class"
        },
        {
            "qname": "org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher.engineDoFinal(byte[],int,int)",
            "diff": null,
            "commit": "21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35",
            "ref_file": "/media/adann/9117b29d-a7c2-4f28-8956-e1540fc0a715/test_compare_script/21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35/org/bouncycastle/jcajce/provider/asymmetric/ec/IESCipher.class",
            "contained": false,
            "affectedFile": "/org/bouncycastle/jcajce/provider/asymmetric/ec/IESCipher.class"
        },
        {
            "qname": "org.bouncycastle.jcajce.provider.util.BadBlockException",
            "diff": null,
            "commit": "21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35",
            "ref_file": "/media/adann/9117b29d-a7c2-4f28-8956-e1540fc0a715/test_compare_script/21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35/org/bouncycastle/jcajce/provider/util/BadBlockException.class",
            "contained": false,
            "affectedFile": "/org/bouncycastle/jcajce/provider/util/BadBlockException.class"
        },
        {
            "qname": "org.bouncycastle.jcajce.provider.util.BadBlockException(String,Throwable)",
            "diff": null,
            "commit": "21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35",
            "ref_file": "/media/adann/9117b29d-a7c2-4f28-8956-e1540fc0a715/test_compare_script/21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35/org/bouncycastle/jcajce/provider/util/BadBlockException.class",
            "contained": false,
            "affectedFile": "/org/bouncycastle/jcajce/provider/util/BadBlockException.class"
        },
        {
            "qname": "org.bouncycastle.jcajce.provider.util.BadBlockException.getCause()",
            "diff": null,
            "commit": "21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35",
            "ref_file": "/media/adann/9117b29d-a7c2-4f28-8956-e1540fc0a715/test_compare_script/21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35/org/bouncycastle/jcajce/provider/util/BadBlockException.class",
            "contained": false,
            "affectedFile": "/org/bouncycastle/jcajce/provider/util/BadBlockException.class"
        }
    ],
    "timestamp": "2018-11-30",
    "comment": "https://github.com/bcgit/bc-java/commit/21dcb3d9744c83dcf2ff8fcee06dbca7bfa4ef35 \"class IESEngine contained\""
}