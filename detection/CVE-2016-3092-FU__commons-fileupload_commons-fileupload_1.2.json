{
    "timestamp": "2018-11-30",
    "cve": "CVE-2016-3092-FU",
    "comment": "https://nvd.nist.gov/vuln/detail/CVE-2016-3092",
    "vulnerable": false,
    "details": [
        {
            "diff": "{\"lhs\" : {\"KEEP_REGION_PAD\":null,\"<init>.6\":[\"if r2 != null goto r0.<org.apache.commons.fileupload.MultipartStream: java.io.InputStream input> = r1\", \"$r14 = new java.lang.IllegalArgumentException\", \"specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"boundary may not be null\")\", \"throw $r14\"],\"<init>.19\":[\"r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength> = $i3\", \"$i4 = r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>\", \"$i5 = $i4 + 1\", \"if i0 >= $i5 goto $i6 = r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>\", \"$r13 = new java.lang.IllegalArgumentException\", \"specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"The buffer size specified for the MultipartStream is too small\")\", \"throw $r13\", \"$i6 = r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>\", \"$r6 = newarray (byte)[$i6]\"],\"<init>.29\":[\"$r7 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>\", \"$i7 = lengthof $r7\", \"r0.<org.apache.commons.fileupload.MultipartStream: int keepRegion> = $i7\"],\"<init>.35\":[\"$i8 = lengthof $r8\", \"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i8)\"],\"<init>.39\":[\"$i10 = lengthof $r11\", \"$i9 = lengthof r2\", \"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r12, $i10, $i9)\"],\"readByte.3\":[\"if $i1 != $i0 goto $r6 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>\"],\"readByte.5\":[\"$r2 = r0.<org.apache.commons.fileupload.MultipartStream: java.io.InputStream input>\", \"$r1 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>\", \"$i3 = r0.<org.apache.commons.fileupload.MultipartStream: int head>\", \"$i2 = r0.<org.apache.commons.fileupload.MultipartStream: int bufSize>\", \"$i4 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, $i3, $i2)\", \"r0.<org.apache.commons.fileupload.MultipartStream: int tail> = $i4\", \"$i5 = r0.<org.apache.commons.fileupload.MultipartStream: int tail>\", \"if $i5 != -1 goto $r3 = r0.<org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier>\", \"$r5 = new java.io.IOException\", \"specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>(\"No more data is available\")\", \"throw $r5\", \"$r3 = r0.<org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier>\", \"if $r3 == null goto $r6 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>\"],\"readByte.19\":[\"$i6 = r0.<org.apache.commons.fileupload.MultipartStream: int tail>\", \"virtualinvoke $r4.<org.apache.commons.fileupload.MultipartStream$ProgressNotifier: void noteBytesRead(int)>($i6)\", \"$r6 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>\", \"$i7 = r0.<org.apache.commons.fileupload.MultipartStream: int head>\", \"$i8 = $i7 + 1\", \"r0.<org.apache.commons.fileupload.MultipartStream: int head> = $i8\", \"$b9 = $r6[$i7]\", \"return $b9\"],\"readBoundary.13\":\"$r2 = <org.apache.commons.fileupload.MultipartStream: byte[] STREAM_TERMINATOR>\",\"readBoundary.14\":\"$z0 = staticinvoke <org.apache.commons.fileupload.MultipartStream: boolean arrayequals(byte[],byte[],int)>(r1, $r2, 2)\",\"readBoundary.15\":\"if $z0 == 0 goto $r3 = <org.apache.commons.fileupload.MultipartStream: byte[] FIELD_SEPARATOR>\",\"readBoundary.18\":\"$r3 = <org.apache.commons.fileupload.MultipartStream: byte[] FIELD_SEPARATOR>\",\"readBoundary.19\":\"$z1 = staticinvoke <org.apache.commons.fileupload.MultipartStream: boolean arrayequals(byte[],byte[],int)>(r1, $r3, 2)\",\"readBoundary.20\":\"if $z1 == 0 goto $r4 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException\",\"readBoundary.23\":\"$r4 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException\",\"readBoundary.24\":\"specialinvoke $r4.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>(\\\"Unexpected characters follow a boundary\\\")\",\"readBoundary.25\":\"throw $r4\",\"readBoundary.26\":\"goto [?= return z3]\",\"readBoundary.27\":\"$r5 := @caughtexception\",\"readBoundary.28\":\"throw $r5\",\"readBoundary.29\":\"$r6 := @caughtexception\",\"readBoundary.30\":\"$r7 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException\",\"readBoundary.31\":\"specialinvoke $r7.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>(\\\"Stream ended unexpectedly\\\")\",\"readBoundary.32\":\"throw $r7\",\"setBoundary.8\":[\"$r5 = new org.apache.commons.fileupload.MultipartStream$IllegalBoundaryException\", \"specialinvoke $r5.<org.apache.commons.fileupload.MultipartStream$IllegalBoundaryException: void <init>(java.lang.String)>(\"The length of a boundary token can not be changed\")\", \"throw $r5\"],\"readHeaders.1\":[\"i3 = 0\", \"$r2 = new java.io.ByteArrayOutputStream\", \"specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>()\"],\"readHeaders.5\":[\"$r3 = <org.apache.commons.fileupload.MultipartStream: byte[] HEADER_SEPARATOR>\", \"$i1 = lengthof $r3\", \"if i3 >= $i1 goto $r4 = r0.<org.apache.commons.fileupload.MultipartStream: java.lang.String headerEncoding>\", \"b0 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream: byte readByte()>()\", \"goto [?= i4 = i4 + 1]\", \"$r11 := @caughtexception\", \"throw $r11\", \"$r13 := @caughtexception\", \"$r14 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException\", \"specialinvoke $r14.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>(\"Stream ended unexpectedly\")\", \"throw $r14\", \"i4 = i4 + 1\", \"if i4 <= 10240 goto $r6 = <org.apache.commons.fileupload.MultipartStream: byte[] HEADER_SEPARATOR>\", \"$r7 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException\", \"$r8 = newarray (java.lang.Object)[1]\", \"$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10240)\", \"$r8[0] = $r9\", \"$r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Header section has more than %s bytes (maybe it is not properly terminated)\", $r8)\", \"specialinvoke $r7.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>($r10)\", \"throw $r7\"],\"readHeaders.26\":[\"$b2 = $r6[i3]\", \"if b0 != $b2 goto i3 = 0\", \"i3 = i3 + 1\", \"goto [?= virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(int)>(b0)]\", \"i3 = 0\", \"virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(int)>(b0)\", \"goto [?= $r3 = <org.apache.commons.fileupload.MultipartStream: byte[] HEADER_SEPARATOR>]\"],\"readHeaders.34\":[\"if $r4 == null goto r16 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: java.lang.String toString()>()\"],\"readHeaders.36\":[\"r16 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>($r5)\", \"goto [?= return r16]\", \"$r12 := @caughtexception\", \"r16 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: java.lang.String toString()>()\", \"goto [?= return r16]\", \"r16 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: java.lang.String toString()>()\", \"return r16\"],\"readBodyData.2\":[\"$r2 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ItemInputStream newInputStream()>()\", \"$l0 = staticinvoke <org.apache.commons.fileupload.util.Streams: long copy(java.io.InputStream,java.io.OutputStream,boolean)>($r2, r1, 0)\"],\"access$400\":\"<org.apache.commons.fileupload.MultipartStream: java.io.InputStream access$400(org.apache.commons.fileupload.MultipartStream)>\",\"access$500\":\"<org.apache.commons.fileupload.MultipartStream: int access$500(org.apache.commons.fileupload.MultipartStream)>\",\"access$112\":null,\"access$114\":null,\"access$400\":null,\"access$500\":null},\"rhs\" : {\"KEEP_REGION_PAD\":\"<org.apache.commons.fileupload.MultipartStream: int KEEP_REGION_PAD>\",\"<init>.6\":null,\"<init>.19\":[\"$r6 = newarray (byte)[$i3]\"],\"<init>.29\":[\"$i5 = lengthof r2\", \"$r7 = <org.apache.commons.fileupload.MultipartStream: byte[] BOUNDARY_PREFIX>\", \"$i4 = lengthof $r7\", \"$i6 = $i5 + $i4\", \"r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength> = $i6\", \"$i7 = lengthof r2\", \"$i8 = $i7 + 3\", \"r0.<org.apache.commons.fileupload.MultipartStream: int keepRegion> = $i8\"],\"<init>.35\":[\"$i9 = lengthof $r8\", \"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i9)\"],\"<init>.39\":[\"$i11 = lengthof $r11\", \"$i10 = lengthof r2\", \"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r12, $i11, $i10)\"],\"readByte.3\":[\"if $i1 != $i0 goto $r1 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>\"],\"readByte.5\":[\"$r3 = r0.<org.apache.commons.fileupload.MultipartStream: java.io.InputStream input>\", \"$r2 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>\", \"$i6 = r0.<org.apache.commons.fileupload.MultipartStream: int head>\", \"$i5 = r0.<org.apache.commons.fileupload.MultipartStream: int bufSize>\", \"$i7 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, $i6, $i5)\", \"r0.<org.apache.commons.fileupload.MultipartStream: int tail> = $i7\", \"$i8 = r0.<org.apache.commons.fileupload.MultipartStream: int tail>\", \"if $i8 != -1 goto $r4 = r0.<org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier>\", \"$r6 = new java.io.IOException\", \"specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>(\"No more data is available\")\", \"throw $r6\"],\"readByte.19\":[\"$i9 = r0.<org.apache.commons.fileupload.MultipartStream: int tail>\", \"virtualinvoke $r4.<org.apache.commons.fileupload.MultipartStream$ProgressNotifier: void noteBytesRead(int)>($i9)\", \"$r1 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>\", \"$i2 = r0.<org.apache.commons.fileupload.MultipartStream: int head>\", \"$i3 = $i2 + 1\", \"r0.<org.apache.commons.fileupload.MultipartStream: int head> = $i3\", \"$b4 = $r1[$i2]\", \"return $b4\"],\"readBoundary.13\":\"$r3 = <org.apache.commons.fileupload.MultipartStream: byte[] STREAM_TERMINATOR>\",\"readBoundary.14\":\"$z0 = staticinvoke <org.apache.commons.fileupload.MultipartStream: boolean arrayequals(byte[],byte[],int)>(r1, $r3, 2)\",\"readBoundary.15\":\"if $z0 == 0 goto $r4 = <org.apache.commons.fileupload.MultipartStream: byte[] FIELD_SEPARATOR>\",\"readBoundary.18\":\"$r4 = <org.apache.commons.fileupload.MultipartStream: byte[] FIELD_SEPARATOR>\",\"readBoundary.19\":\"$z1 = staticinvoke <org.apache.commons.fileupload.MultipartStream: boolean arrayequals(byte[],byte[],int)>(r1, $r4, 2)\",\"readBoundary.20\":\"if $z1 == 0 goto r8 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException\",\"readBoundary.23\":\"r8 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException\",\"readBoundary.24\":\"specialinvoke r8.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>(\\\"Unexpected characters follow a boundary\\\")\",\"readBoundary.25\":\"r10 = (java.lang.Throwable) r8\",\"readBoundary.26\":\"throw r10\",\"readBoundary.27\":\"goto [?= return z3]\",\"readBoundary.28\":\"$r6 := @caughtexception\",\"readBoundary.29\":\"r9 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException\",\"readBoundary.30\":\"specialinvoke r9.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>(\\\"Stream ended unexpectedly\\\")\",\"readBoundary.31\":\"r11 = (java.lang.Throwable) r9\",\"readBoundary.32\":\"throw r11\",\"setBoundary.8\":[\"r6 = new org.apache.commons.fileupload.MultipartStream$IllegalBoundaryException\", \"specialinvoke r6.<org.apache.commons.fileupload.MultipartStream$IllegalBoundaryException: void <init>(java.lang.String)>(\"The length of a boundary token can not be changed\")\", \"r7 = (java.lang.Throwable) r6\", \"throw r7\"],\"readHeaders.1\":null,\"readHeaders.5\":[\"r1 = newarray (byte)[1]\", \"r12 = new java.io.ByteArrayOutputStream\", \"specialinvoke r12.<java.io.ByteArrayOutputStream: void <init>()>()\", \"i5 = 0\", \"$r10 = <org.apache.commons.fileupload.MultipartStream: byte[] HEADER_SEPARATOR>\", \"$i6 = lengthof $r10\", \"if i4 >= $i6 goto $r4 = r0.<org.apache.commons.fileupload.MultipartStream: java.lang.String headerEncoding>\", \"$b0 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream: byte readByte()>()\", \"r1[0] = $b0\", \"goto [?= i5 = i5 + 1]\", \"$r8 := @caughtexception\", \"r13 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException\", \"specialinvoke r13.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>(\"Stream ended unexpectedly\")\", \"r14 = (java.lang.Throwable) r13\", \"throw r14\", \"i5 = i5 + 1\", \"$b2 = r1[0]\"],\"readHeaders.26\":[\"$b1 = $r6[i4]\", \"if $b2 != $b1 goto i4 = 0\", \"i4 = i4 + 1\", \"goto [?= (branch)]\", \"i4 = 0\", \"if i5 > 10240 goto $r10 = <org.apache.commons.fileupload.MultipartStream: byte[] HEADER_SEPARATOR>\", \"$b3 = r1[0]\", \"virtualinvoke r12.<java.io.ByteArrayOutputStream: void write(int)>($b3)\", \"goto [?= $r10 = <org.apache.commons.fileupload.MultipartStream: byte[] HEADER_SEPARATOR>]\"],\"readHeaders.34\":[\"if $r4 == null goto r11 = virtualinvoke r12.<java.io.ByteArrayOutputStream: java.lang.String toString()>()\"],\"readHeaders.36\":[\"r11 = virtualinvoke r12.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>($r5)\", \"goto [?= return r11]\", \"$r7 := @caughtexception\", \"r11 = virtualinvoke r12.<java.io.ByteArrayOutputStream: java.lang.String toString()>()\", \"goto [?= return r11]\", \"r11 = virtualinvoke r12.<java.io.ByteArrayOutputStream: java.lang.String toString()>()\", \"return r11\"],\"readBodyData.2\":[\"r2 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ItemInputStream newInputStream()>()\", \"r3 = (java.io.InputStream) r2\", \"$l0 = staticinvoke <org.apache.commons.fileupload.util.Streams: long copy(java.io.InputStream,java.io.OutputStream,boolean)>(r3, r1, 0)\"],\"access$400\":null,\"access$500\":null,\"access$112\":\"<org.apache.commons.fileupload.MultipartStream: int access$112(org.apache.commons.fileupload.MultipartStream,int)>\",\"access$114\":\"<org.apache.commons.fileupload.MultipartStream: int access$114(org.apache.commons.fileupload.MultipartStream,long)>\",\"access$400\":\"<org.apache.commons.fileupload.MultipartStream: int access$400(org.apache.commons.fileupload.MultipartStream)>\",\"access$500\":\"<org.apache.commons.fileupload.MultipartStream: java.io.InputStream access$500(org.apache.commons.fileupload.MultipartStream)>\"}}",
            "affectedFile": "/org/apache/commons/fileupload/MultipartStream.class",
            "qname": "org.apache.commons.fileupload.MultipartStream",
            "ref_file": "/data4/test_compare_script/1743480/org/apache/commons/fileupload/MultipartStream.class",
            "contained": true,
            "commit": "1743480"
        },
        {
            "diff": "{\"lhs\" : {\"6\":[\"if r2 != null goto r0.<org.apache.commons.fileupload.MultipartStream: java.io.InputStream input> = r1\", \"$r14 = new java.lang.IllegalArgumentException\", \"specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"boundary may not be null\")\", \"throw $r14\"],\"19\":[\"r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength> = $i3\", \"$i4 = r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>\", \"$i5 = $i4 + 1\", \"if i0 >= $i5 goto $i6 = r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>\", \"$r13 = new java.lang.IllegalArgumentException\", \"specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"The buffer size specified for the MultipartStream is too small\")\", \"throw $r13\", \"$i6 = r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>\", \"$r6 = newarray (byte)[$i6]\"],\"29\":[\"$r7 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>\", \"$i7 = lengthof $r7\", \"r0.<org.apache.commons.fileupload.MultipartStream: int keepRegion> = $i7\"],\"35\":[\"$i8 = lengthof $r8\", \"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i8)\"],\"39\":[\"$i10 = lengthof $r11\", \"$i9 = lengthof r2\", \"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r12, $i10, $i9)\"]},\"rhs\" : {\"6\":null,\"19\":[\"$r6 = newarray (byte)[$i3]\"],\"29\":[\"$i5 = lengthof r2\", \"$r7 = <org.apache.commons.fileupload.MultipartStream: byte[] BOUNDARY_PREFIX>\", \"$i4 = lengthof $r7\", \"$i6 = $i5 + $i4\", \"r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength> = $i6\", \"$i7 = lengthof r2\", \"$i8 = $i7 + 3\", \"r0.<org.apache.commons.fileupload.MultipartStream: int keepRegion> = $i8\"],\"35\":[\"$i9 = lengthof $r8\", \"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i9)\"],\"39\":[\"$i11 = lengthof $r11\", \"$i10 = lengthof r2\", \"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r12, $i11, $i10)\"]}}",
            "affectedFile": "/org/apache/commons/fileupload/MultipartStream.class",
            "qname": "org.apache.commons.fileupload.MultipartStream(InputStream,byte[],int,ProgressNotifier)",
            "ref_file": "/data4/test_compare_script/1743480/org/apache/commons/fileupload/MultipartStream.class",
            "contained": true,
            "commit": "1743480"
        }
    ],
    "gav": {
        "version": "1.2",
        "groupId": "commons-fileupload",
        "artifactId": "commons-fileupload"
    }
}